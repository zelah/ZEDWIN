("my-flatten") "tree"
comment: "tree" is not a pair -> flattens "tree"
("not") ("pair?") "tree"
"tree"

("my-flatten") "tree"
comment: first element of "tree" is the empty list -> flattens "tree"
("null?") ("car") "tree"
("my-flatten") ("cdr") "tree"

("my-flatten") "tree"
comment: first element of "tree" is a pair -> flattens "tree"
("pair?") ("car") "tree"
("append") ("my-flatten") ("car") "tree"
           ("my-flatten") ("cdr") "tree"

("my-flatten") "tree"
comment: first element of "tree" is not a pair -> flattens "tree"
("not") ("pair?") ("car") "tree"
("cons") ("car") "tree" ("my-flatten") ("cdr") "tree"

("remove-leading") "number" "list"
comment: empty "list" -> removes "number" elements from the head of "list"
("null?") "list"
nil

("remove-leading") "number" "list"
comment: "number" is zero -> removes "number" elements from the head of "list"
("=") "number" 0
"list"

("remove-leading") "number" "list"
comment: number is positive -> removes "number" elements from the head of "list"
(">") "number" 0
("remove-leading") ("-") "number" 1
                   ("cdr") "list"

("ZEDefy") "string"
comment: takes "string" -> prepends ""ZED"" and returns a symbol
(always)
("string->symbol")
  ("list->string")
    ("append")
      ("wrap3") #Z #E #D
      ("my-flatten")
        ("map") "symbol-character"
                ("string->list") "string"

("symbol-character") "character"
comment: "character" is #[ -> returns characters for constructing an identifier
(=) "character" #[
("wrap2") #@ #1

("symbol-character") "character"
comment: "character" is #] -> returns characters for constructing an identifier
(=) "character" #]
("wrap2") #@ #2

("symbol-character") "character"
comment: "character" is #{ -> returns characters for constructing an identifier
(=) "character" #{
("wrap2") #@ #3

("symbol-character") "character"
comment: "character" is #} -> returns characters for constructing an identifier
(=) "character" #}
("wrap2") #@ #4

("symbol-character") "character"
comment: "character" is #' -> returns characters for constructing an identifier
(=) "character" #'
("wrap2") #@ #q

("symbol-character") "character"
comment: "character" is #` -> returns characters for constructing an identifier
(=) "character" #`
("wrap2") #@ #Q

("symbol-character") "character"
comment: "character" is #, -> returns characters for constructing an identifier
(=) "character" #,
("wrap2") #@ #c

("symbol-character") "character"
comment: "character" is #; -> returns characters for constructing an identifier
(=) "character" #;
("wrap2") #@ #s

("symbol-character") "character"
comment: "character" is #\ -> returns characters for constructing an identifier
(=) "character" #\
("wrap2") #@ #b

("symbol-character") "character"
comment: "character" does not have a graphical representation -> returns characters for constructing an identifier
("not") ("char-graphic?") "character"
("wrap2") #@ #w

("symbol-character") "character"
comment: "character" has a graphical representation -> returns characters for constructing an identifier
("char-graphic?") "character"
"character"

("clause-name") "clause"
comment: (abs (number) ((=) number 0) (0))
(always)
("car") "clause"

("clause-arguments") "clause"
comment: (abs (number) ((=) number 0) (0))
(always)
("cadr") "clause"

("clause-arity") "clause"
comment: (abs (number) ((=) number 0) (0))
(always)
("length") ("clause-arguments") "clause"

("clause-body") "clause"
comment: (abs (number) ((=) number 0) (0))
(always)
("cddr") "clause"

("clause-name-agree") "clause1" "clause2"
comment: takes two clauses -> returns the common clause name or signals err
("eq?") ("clause-name") "clause1"
        ("clause-name") "clause2"
("clause-name") "clause1"

("clause-arguments-agree") "clause1" "clause2"
comment: takes two clauses -> returns the common clause arguments or signals err
("equal?") ("clause-arguments") "clause1"
           ("clause-arguments") "clause2"
("clause-arguments") "clause1"

("combine-clauses") "clause1" "clause2"
comment: takes two clauses -> combines them
(always)
("cons") ("clause-name-agree") "clause1" "clause2"
         ("cons") ("clause-arguments-agree") "clause1" "clause2"
                  ("append") ("clause-body") "clause1"
                             ("clause-body") "clause2"

("combine-head-clauses") "program"
comment: "program" is a list of clauses -> combines the first two
(always)
("cons") ("combine-clauses") ("car") "program" ("cadr") "program"
         ("cddr") "program"

("ready-clause") "clause"
comment: (((abs) number) ((=) number 0) (0))
(always)
("cons") ("caaar") "clause"
         ("cons") ("cdar") "clause"
                  ("cdr") "clause"

("ready-program") "program"
comment: "program" is a list of clauses -> readies the program
(always)
("map") "ready-clause" "program"

("combine-all") "program"
comment: empty "program" -> returns the fully combined program
("null?") "program"
nil

("combine-all") "program"
comment: one clause "program" -> returns the fully combined program
("null?") ("cdr") "program"
"program"

("combine-all") "program"
comment: head clause names in "program" agree -> returns the fully combined program
(=) ("clause-name") ("car") "program"
    ("clause-name") ("cadr") "program"
("combine-all") ("combine-head-clauses") "program"

("combine-all") "program"
comment: head clause names in "program" do not agree -> returns the fully combined program
("not") (=) ("clause-name") ("car") "program"
            ("clause-name") ("cadr") "program"
("cons") ("car") "program"
         ("combine-all") ("cdr") "program"

("combine-program-clauses") "program"
comment: "program" is a list of clauses -> returns the fully combined program after readying the clauses
(always)
("combine-all") ("ready-program") "program"

("arity-hash") "program"
comment: "program" is a list of combined clauses -> returns a symbol-arity hash table
(always)
("make-hasheq") ("append") ("map") "arity-hash1" "program"
                ("append") ("wrap16")
                ("cons") "'wrap" 1
                ("cons") "'wrap2" 2
                ("cons") "'wrap3" 3
                ("cons") "'wrap4" 4
                ("cons") "'wrap5" 5
                ("cons") "'wrap6" 6
                ("cons") "'wrap7" 7
                ("cons") "'wrap8" 8
                ("cons") "'wrap9" 9
                ("cons") "'wrap10" 10
                ("cons") "'wrap11" 11
                ("cons") "'wrap12" 12
                ("cons") "'wrap13" 13
                ("cons") "'wrap14" 14
                ("cons") "'wrap15" 15
                ("cons") "'wrap16" 16
              ("append") ("wrap16")
                ("cons") "'and" 2
                ("cons") "'append" 2
                ("cons") "'assoc" 2
                ("cons") "'begin" 2
                ("cons") "'boolean?" 1
                ("cons") "'caaar" 1
                ("cons") "'cadr" 1
                ("cons") "'caddr" 1
                ("cons") "'cadddr" 1
                ("cons") "'car" 1
                ("cons") "'cdar" 1
                ("cons") "'cddddr" 1
                ("cons") "'cddr" 1
                ("cons") "'cdr" 1
                ("cons") "'char?" 1
                ("cons") "'char-numeric?" 1
              ("append") ("wrap16")
                ("cons") "'char-graphic?" 1
                ("cons") "'close-input-port" 1
                ("cons") "'close-output-port" 1
                ("cons") "'cons" 2
                ("cons") "'define" 2
                ("cons") "'delete-file" 1
                ("cons") "'display" 2
                ("cons") "'eq?" 2
                ("cons") "'equal?" 2
                ("cons") "'eof-object?" 1
                ("cons") "'exact?" 1
                ("cons") "'file-exists?" 1
                ("cons") "'inexact?" 1
                ("cons") "'length" 1
                ("cons") "'list->string" 1
                ("cons") "'map" 2
              ("append") ("wrap16")
                ("cons") "'not" 1
                ("cons") "'null?" 1
                ("cons") "'number?" 1
                ("cons") "'newline" 1
                ("cons") "'number->string" 1
                ("cons") "'or" 2
                ("cons") "'open-input-file" 1
                ("cons") "'open-output-file" 1
                ("cons") "'pair?" 1
                ("cons") "'quote" 1
                ("cons") "'reverse" 1
                ("cons") "'read-char" 1
                ("cons") "'symbol?" 1
                ("cons") "'string?" 1
                ("cons") "'string-append" 2
                ("cons") "'string->symbol" 1
              ("append") ("wrap16")
                ("cons") "'symbol->string" 1
                ("cons") "'string->list" 1
                ("cons") "'string->number" 1
                ("cons") "'=" 2
                ("cons") "'<" 2
                ("cons") "'>" 2
                ("cons") "'-" 2
                ("cons") "'+" 2
                ("cons") "'*" 2
                ("cons") "'/" 2
                ("cons") "'ZED1" 1
                ("cons") "'ZED!" 1
                ("cons") "'ZEDc" 2
                ("cons") "'ZEDone" 1
                ("cons") "'ZEDtwo" 2
                ("cons") "'ZEDthree" 3
              ("append") ("wrap16")
                ("cons") "'ZEDfour" 4
                ("cons") "'ZEDfive" 5
                ("cons") "'ZEDsix" 6
                ("cons") "'ZEDseven" 7
                ("cons") "'ZEDeight" 8
                ("cons") "'ZEDnine" 9
                ("cons") "'ZEDten" 10
                ("cons") "'force" 1
                ("cons") "'ZED=" 2
                ("cons") "'caar" 1
                ("cons") "'cdddr" 1
                ("cons") "'list" 0
                ("cons") "'ZEDalways" 0
                ("cons") "'apply" 2
                ("cons") "'ZEDse" 2
                ("cons") "'ZEDand" 2
              ("append") ("wrap16")
                ("cons") "'ZEDor" 2
                ("cons") "'ZEDeleven" 11
                ("cons") "'ZEDtwelve" 12
                ("cons") "'ZEDthirteen" 13
                ("cons") "'ZEDfourteen" 14
                ("cons") "'ZEDfifteen" 15
                ("cons") "'ZEDsixteen" 16
                ("cons") "'ZEDseventeen" 17
                ("cons") "'ZEDeighteen" 18
                ("cons") "'ZEDnineteen" 19
                ("cons") "'ZEDtwenty" 20
                ("cons") "'ZEDtwenty-one" 21
                ("cons") "'ZEDtwenty-two" 22
                ("cons") "'ZEDtwenty-three" 23
                ("cons") "'ZEDtwenty-four" 24
                ("cons") "'ZEDtwenty-five" 25
              ("append") ("wrap16") 
                ("cons") "'ZEDtwenty-six" 26
                ("cons") "'ZEDtwenty-seven" 27
                ("cons") "'ZEDtwenty-eight" 28
                ("cons") "'ZEDtwenty-nine" 29
                ("cons") "'ZEDthirty" 30
                ("cons") "'ZEDthirty-one" 31
                ("cons") "'ZEDthirty-two" 32
                ("cons") "'get-file" 0
                ("cons") "'make-hasheq" 1
                ("cons") "'hash-ref" 2
                ("cons") "'apply1" 4
                ("cons") "'apply2" 6
                ("cons") "'apply3" 8
                ("cons") "'apply4" 10
                ("cons") "'apply5" 12
                ("cons") "'filter" 2
              ("append") ("wrap16")
                ("cons") "'foldr" 3
                ("cons") "'function-hack-2" 2
                ("cons") "'write-char" 2
                ("cons") "'ZEDthirty-three" 33
                ("cons") "'ZEDthirty-four" 34
                ("cons") "'ZEDthirty-five" 35
                ("cons") "'ZEDthirty-six" 36
                ("cons") "'ZEDthirty-seven" 37
                ("cons") "'ZEDthirty-eight" 38
                ("cons") "'ZEDthirty-nine" 39
                ("cons") "'ZEDforty" 40
                ("cons") "'ZEDforty-one" 41
                ("cons") "'ZEDforty-two" 42
                ("cons") "'ZEDforty-three" 43
                ("cons") "'ZEDforty-four" 44
                ("cons") "'ZEDforty-five" 45
              ("append") ("wrap16")
                ("cons") "'ZEDforty-six" 46
                ("cons") "'ZEDforty-seven" 47
                ("cons") "'ZEDforty-eight" 48
                ("cons") "'ZEDforty-nine" 49
                ("cons") "'ZEDfifty" 50
                ("cons") "'ZEDfifty-one" 51
                ("cons") "'ZEDfifty-two" 52
                ("cons") "'ZEDfifty-three" 53
                ("cons") "'ZEDfifty-four" 54
                ("cons") "'ZEDfifty-five" 55
                ("cons") "'ZEDfifty-six" 56
                ("cons") "'ZEDfifty-seven" 57
                ("cons") "'ZEDfifty-eight" 58
                ("cons") "'ZEDfifty-nine" 59
                ("cons") "'ZEDsixty" 60
                ("cons") "'ZEDsixty-one" 61
              ("append") ("wrap16")
                ("cons") "'ZEDsixty-two" 62
                ("cons") "'ZEDsixty-three" 63
                ("cons") "'ZEDsixty-four" 64
                ("cons") "'ZEDsixty-five" 65
                ("cons") "'ZEDsixty-six" 66
                ("cons") "'ZEDsixty-seven" 67
                ("cons") "'ZEDsixty-eight" 68
                ("cons") "'ZEDsixty-nine" 69
                ("cons") "'ZEDseventy" 70
                ("cons") "'ZEDseventy-one" 71
                ("cons") "'ZEDseventy-two" 72
                ("cons") "'ZEDseventy-three" 73
                ("cons") "'ZEDseventy-four" 74
                ("cons") "'ZEDseventy-five" 75
                ("cons") "'ZEDseventy-six" 76
                ("cons") "'ZEDseventy-seven" 77
              ("append") ("wrap16")
                ("cons") "'ZEDseventy-eight" 78
                ("cons") "'ZEDseventy-nine" 79
                ("cons") "'ZEDeighty" 80
                ("cons") "'ZEDeighty-one" 81
                ("cons") "'ZEDeighty-two" 82
                ("cons") "'ZEDeighty-three" 83
                ("cons") "'ZEDeighty-four" 84
                ("cons") "'ZEDeighty-five" 85
                ("cons") "'ZEDeighty-six" 86
                ("cons") "'ZEDeighty-seven" 87
                ("cons") "'ZEDeighty-eight" 88
                ("cons") "'ZEDeighty-nine" 89
                ("cons") "'ZEDninety" 90
                ("cons") "'ZEDninety-one" 91
                ("cons") "'ZEDninety-two" 92
                ("cons") "'ZEDninety-three" 93
              ("wrap6")
                ("cons") "'ZEDninety-four" 94
                ("cons") "'ZEDninety-five" 95
                ("cons") "'ZEDninety-six" 96
                ("cons") "'ZEDninety-seven" 97
                ("cons") "'ZEDninety-eight" 98
                ("cons") "'ZEDninety-nine" 99
                
("arity-hash1") "clause"
comment: (abs (number) ((=) number 0) (0))
(always)
("cons") ("clause-name") "clause"
         ("clause-arity") "clause"
         
("arity") "arity-hash" "function"
comment: takes a hash-table and a symbol -> returns the arity of the named function
(always)
("hash-ref") "arity-hash" "function"

("primitives")
comment: makes a begin with definitions for the primitives
(always)
("append") ("wrap16")
             "'begin"
             ("quote") ("define") "wrap" "list"
             ("quote") ("define") "wrap2" "list"
             ("quote") ("define") "wrap3" "list"
             ("quote") ("define") "wrap4" "list"
             ("quote") ("define") "wrap5" "list"
             ("quote") ("define") "wrap6" "list"
             ("quote") ("define") "wrap7" "list"
             ("quote") ("define") "wrap8" "list"
             ("quote") ("define") "wrap9" "list"
             ("quote") ("define") "wrap10" "list"
             ("quote") ("define") "wrap11" "list"
             ("quote") ("define") "wrap12" "list"
             ("quote") ("define") "wrap13" "list"
             ("quote") ("define") "wrap14" "list"
             ("quote") ("define") "wrap15" "list"
           ("wrap16")
             ("quote") ("define") "wrap16" "list"
             ("wrap3")
                "'define-syntax"
                "'ZEDand"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap3") "'_" "'a" "'b"
                    ("wrap3") "'and" "'a" "'b"
             ("wrap3")
                "'define-syntax"
                "'ZEDor"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap3") "'_" "'a" "'b"
                    ("wrap3") "'or" "'a" "'b"
             ("wrap3")
                "'define-syntax"
                "'ZEDse"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap3") "'_" "'a" "'b"
                    ("wrap3") "'begin" "'a" "'b"
             ("wrap3")
                "'define-syntax"
                "'ZEDc"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap3") "'_" "'a" "'b"
                    ("wrap3") "'cons"
                              ("wrap2") "'delay" "'a"
                              ("wrap2") "'delay" "'b"
             ("quote")
               ("define")
                 ("ZED1") "pair" ("force") ("car") "pair"
             ("quote")
               ("define")
                 ("ZED!") "pair" ("force") ("cdr") "pair"
             ("quote") ("define") "ZED=" "eqv?"
             ("quote") ("define") "ZEDerr" "'err"
             ("wrap3")
               "'define"
               "'ZEDnil"
               ("wrap2")
                 "'quote"
                 nil
             ("quote") ("define") ("ZEDalways") "#true"
             ("wrap3")
                "'define-syntax"
                "'apply1"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap5") "'_" "'a" "'b" "'c" "'d"
                    ("wrap5") "'apply" "'a" "'b" "'c" "'d"
             ("wrap3")
                "'define-syntax"
                "'apply2"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap7") "'_" "'a" "'b" "'c" "'d" "'e" "'f"
                    ("wrap7") "'apply" "'a" "'b" "'c" "'d" "'e" "'f"
             ("wrap3")
                "'define-syntax"
                "'apply3"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap9") "'_" "'a" "'b" "'c" "'d" "'e" "'f" "'g" "'h"
                    ("wrap9") "'apply" "'a" "'b" "'c" "'d" "'e" "'f" "'g" "'h"
             ("wrap3")
                "'define-syntax"
                "'apply4"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap11") "'_" "'a" "'b" "'c" "'d" "'e" "'f" "'g" "'h" "'i" "'j"
                    ("wrap11") "'apply" "'a" "'b" "'c" "'d" "'e" "'f" "'g" "'h" "'i" "'j"
             ("wrap3")
                "'define-syntax"
                "'apply5"
                ("wrap3")
                  "'syntax-rules"
                  nil
                  ("wrap2")
                    ("wrap13") "'_" "'a" "'b" "'c" "'d" "'e" "'f" "'g" "'h" "'i" "'j" "'k" "'l"
                    ("wrap13") "'apply" "'a" "'b" "'c" "'d" "'e" "'f" "'g" "'h" "'i" "'j" "'k" "'l"           

("application?") "expression"
comment: ((+) 1 2)
(always)
("and") ("not") ("null?") "expression"
        ("pair?") ("car") "expression"

("function") "expression"
comment: ((+) 1 2)
(always)
("caar") "expression"

("double-application?") "expression"
comment: empty "expression" -> is the expression a double application?
("null?") "expression"
"#false"

("double-application?") "expression"
comment: "expression" just has one element -> is the expression a double application?
("null?") ("cdr") "expression"
"#false"

("double-application?") "expression"
comment: "expression" has at least two elements -> is the expression a double application?
(always)
("and") ("pair?") ("car") "expression"
        ("pair?") ("cadr") "expression"
        
("schemefy") "expression" "arity-hash"
comment: takes a ZED expresssion and the arity hash-table -> returns a Scheme expression
(always)
("wrap") ("schemefy1") "expression" "arity-hash"

("schemefy1") "expression" "arity-hash"
comment: (1 2 3) ((+ . 2) (square . 1) (current-directory . 0))
("not") ("application?") "expression"
("car") "expression"

("schemefy1") "expression" "arity-hash"
comment: ((current-directory) (square) 1) ((+ . 2) (square . 1) (current-directory . 0))
(=) 0 ("arity") "arity-hash" ("function") "expression"
("car") "expression"

("schemefy1") "expression" "arity-hash"
comment: ((+) (+) 1 2 3) ((+ . 2) (square . 1) (current-directory . 0))
("double-application?") "expression"
("cons") ("function") "expression"
         ("cons") ("schemefy1") ("cdr") "expression" "arity-hash"
                  ("gather")
                    ("-") ("arity")
                            "arity-hash"
                            ("function") "expression"
                          1
                    ("remove-leading")
                      ("+") 1 ("length")
                                ("my-flatten")
                                  ("schemefy1")
                                    ("cdr") "expression"
                                    "arity-hash"
                      "expression"
                    "arity-hash"

("schemefy1") "expression" "arity-hash"
comment: ((+) 1 2 3) ((+ . 2) (square . 1) (current-directory . 0))
("application?") "expression"
("cons") ("function") "expression"
         ("gather") ("arity")
                      "arity-hash"
                      ("function") "expression"
                    ("cdr") "expression"
                    "arity-hash"

("gather") "how-many" "expression" "arity-hash"
comment: 0 (3) ((+ . 2) (square . 1) (current-directory . 0))
("=") "how-many" 0
nil

("gather") "how-many" "expression" "arity-hash"
comment: 2 ((+) 1 2 3) ((+ . 2) (square . 1) (current-directory . 0))
("application?") "expression"
("append") ("schemefy") "expression" "arity-hash"
           ("gather") ("-") "how-many" 1
                      ("remove-leading")
                        ("length")
                          ("my-flatten")
                            ("schemefy")
                              "expression"
                              "arity-hash"
                        "expression"
                      "arity-hash"

("gather") "how-many" "expression" "arity-hash"
comment: 1 (2 3) ((+ . 2) (square . 1) (current-directory . 0))
("not") ("application?") "expression"
("cons") ("car") "expression"
         ("gather") ("-") "how-many" 1
                    ("cdr") "expression"
                    "arity-hash"

("map-with") "function" "list" "extra"
comment: empty "list" -> map over the list with an extra value
("null?") "list"
nil

("map-with") "function" "list" "extra"
comment: non empty "list" -> map over the list with an extra value
("not") ("null?") "list"
("cons") (three) "function" ("car") "list" "extra"
         ("map-with") "function" ("cdr") "list" "extra"

("functionize") "clause" "arity-hash"
comment: takes an already combined "clause" and the "arity-hash" -> produces a scheme function
(always)
("wrap3") "'define"
          ("cons") ("clause-name") "clause" ("clause-arguments") "clause"
          ("cons") "'cond"
                   ("append")
                     ("condefy")
                       ("map-with")
                         "schemefy"
                         ("clause-body") "clause"
                         "arity-hash"
                     ("wrap") ("wrap2") "'else" "'ZEDerr"

("condefy") "expressions"
comment: empty "expressions" -> constructs the list structure of a cond
("null?") "expressions"
nil

("condefy") "expressions"
comment: (((< number 0)) ((- 0 number)) ((not (< number 0))) (number))
(always)
("cons") ("append") ("car") "expressions"
                    ("cadr") "expressions"
         ("condefy") ("cddr") "expressions"

("programize") "program" "arity-hash"
comment: takes the already combined clauses of "program" -> generates a Scheme program
(always)
("cons") "'begin" ("map-with") "functionize" "program" "arity-hash"

("namefy") "part-of-expression"
comment: empty "part-of-expression" -> rewrites parts of an expression
("null?") "part-of-expression"
nil

("namefy") "part-of-expression"
comment: (square)
("pair?") "part-of-expression"
("wrap") ("symbolize") ("car") "part-of-expression"

("namefy") "part-of-expression"
comment: .25
("not") ("pair?") "part-of-expression"
("flexefy") "part-of-expression"

("symbolize") "part"
comment: hey
("symbol?") "part"
("ZEDefy") ("symbol->string") "part"

("symbolize") "part"
comment: "hey"
("string?") "part"
("string->symbol") "part"

("symbolize") "part"
comment: 42
("number?") "part"
("ZEDefy") ("number->string") "part"

("flexefy") "part"
comment: hey
("symbol?") "part"
("flexefy1") ("string->list") ("symbol->string") "part"

("flexefy") "part"
comment: "hey"
("string?") "part"
("string->symbol") "part"

("flexefy") "part"
comment: #true
("boolean?") "part"
"part"

("flexefy") "part"
comment: #Z
("char?") "part"
"part"

("flexefy") "part"
comment: 42
("exact?") "part"
"part"

("flexefy") "part"
comment: .25
("inexact?") "part"
("string->number") ("string-append") ""#e"" ("number->string") "part"

("flexefy1") "list"
comment: (## #0 #1)
("and") (=) ## ("car") "list"
        ("and") (=) #0 ("cadr") "list"
                ("not") ("null?") ("cddr") "list"
("string->symbol")
  ("list->string") ("append") ("wrap3") ## #\ #u
                              ("cddr") "list"

("flexefy1") "list"
comment: (## #t #r #u #e)
(three) "equal?" "list" ("wrap5") ## #t #r #u #e
"#true"
             
("flexefy1") "list"
comment: (## #f #a #l #s #e)
(three) "equal?" "list" ("wrap6") ## #f #a #l #s #e
"#false"
             
("flexefy1") "list"
comment: (## #n #u #l)
(=) ("car") "list" ##
("string->symbol") ("list->string") ("append") ("wrap2") ## #\
                                               ("cdr") "list"

("flexefy1") "list"
comment: (#h #e #y)
("not") (=) ("car") "list" ##
("ZEDefy") ("list->string") "list"

("read-all!") "port"
comment: any input port -> reads in all the characters
(always)
("read-all1") "port" ("read-char") "port"

("read-all1") "port" "character"
comment: character is the end of file object -> reads in all the characters
("eof-object?") "character"
("begin") ("close-input-port") "port"
          nil

("read-all1") "port" "character"
comment: not at end of file -> reads in all the characters
("not") ("eof-object?") "character"
("cons") "character" ("read-all!") "port"

("newline-space") "program"
comment: takes a "program" -> repeatedly removes newlines preceding #space or #tab
(always)
("append") ("newline-space-again") "program"
           ("wrap") #newline

("newline-space1") "program"
comment: empty "program" -> removes newlines before #space or #tab
("null?") "program"
nil

("newline-space1") "program"
comment: (#Z)
("null?") ("cdr") "program"
"program"

("newline-space1") "program"
comment: (#newline #tab #Z #E #D)
("and") (=) #newline ("car") "program"
        ("or") (=) #space ("cadr") "program"
               (=) #tab ("cadr") "program"
("newline-space1") ("cdr") "program"

("newline-space1") "program"
comment: (#newline #newline #space #Z)
(=) #newline ("car") "program"
("cons") #newline ("newline-space1") ("cdr") "program"

("newline-space1") "program"
comment: (#Z #newline #newline #space)
("not") (=) #newline ("car") "program"
("cons") ("car") "program" ("newline-space1") ("cdr") "program"

("newline-space-again") "program"
comment: takes a "program" -> repeatedly removes newlines preceding #space or #tab
(always)
("newline-space-again1") "program" ("newline-space1") "program"

("newline-space-again1") "program" "transformed-program"
comment: (#Z #space) (#Z #space)
("equal?") "program" "transformed-program"
"program"

("newline-space-again1") "program" "transformed-program"
comment: (#Z #newline #space) '(#Z #space)
(always)
("newline-space-again") "transformed-program"

("newline-space-tab-repeats") "program"
comment: empty "program" -> returns program with no consecutive #newline and no consecutive #tab #space
("null?") "program"
nil

("newline-space-tab-repeats") "program"
comment: (#Z)
("null?") ("cdr") "program"
"program"

("newline-space-tab-repeats") "program"
comment: (#newline #newline #newline #Z)
("and") (=) #newline ("car") "program"
        (=) #newline ("cadr") "program"
("newline-space-tab-repeats") ("cdr") "program"

("newline-space-tab-repeats") "program"
comment: (#tab #space #tab #Z)
("and") ("or") (=) #space ("car") "program"
               (=) #tab ("car") "program"
        ("or") (=) #space ("cadr") "program"
               (=) #tab ("cadr") "program"
("newline-space-tab-repeats") ("cdr") "program"

("newline-space-tab-repeats") "program"
comment: (#tab #Z)
(always)
("cons") ("car") "program" ("newline-space-tab-repeats") ("cdr") "program"

("tab-replace") "program"
comment: empty program -> replaces #tab with #space
("null?") "program"
nil

("tab-replace") "program"
comment: (#tab #Z #space)
(=) #tab ("car") "program"
("cons") #space ("tab-replace") ("cdr") "program"

("tab-replace") "program"
comment: (#Z #tab)
(always)
("cons") ("car") "program" ("tab-replace") ("cdr") "program"

("space-newline") "program"
comment: empty "program" -> remove #space before #newline
("null?") "program"
nil

("space-newline") "program"
comment: (#newline)
("null?") ("cdr") "program"
"program"

("space-newline") "program"
comment: (#space #newline #Z)
("and") (=) #space ("car") "program"
        (=) #newline ("cadr") "program"
("space-newline") ("cdr") "program"

("space-newline") "program"
comment: (#newline #Z #space #newline)
(always)
("cons") ("car") "program" ("space-newline") ("cdr") "program"

("leading-newlines") "program"
comment: empty "program" -> program without leading newlines
("null?") "program"
nil

("leading-newlines") "program"
comment: (#newline #Z)
(=) #newline ("car") "program"
("cdr") "program"

("leading-newlines") "program"
comment: (#Z #newline #E #newline)
(always)
"program"

("sentences") "program"
comment: (#o #n #e #space #t #w #o #newline #t #h #r #e #e #newline)
(always)
("sentences1") "program" nil

("sentences1") "program" "accumulator"
comment: empty "program" -> returns the program broken up into sentences
("null?") "program"
nil

("sentences1") "program" "accumulator"
comment: (#newline #t #h #r #e #e #newline) (#o #w #t #space #e #n #o)
(=) #newline ("car") "program"
("cons") ("reverse") "accumulator"
         ("sentences1") ("cdr") "program" nil

("sentences1") "program" "accumulator"
comment: (#o #newline #t #h #r #e #e #newline) (#w #t #space #e #n #o)
(always)
("sentences1") ("cdr") "program"
               ("cons") ("car") "program"
                        "accumulator"

("discard-comments") "program"
comment: empty "program" -> throws out the comments
("null?") "program"
nil

("discard-comments") "program"
comment: non empty "program" -> throws out the comments
(always)
("cons") ("car") "program"
         ("cons") ("caddr") "program"
                  ("cons") ("cadddr") "program"
                           ("discard-comments") ("cddddr") "program"

("read-sentence") "sentence"
nil
("null?") "sentence"
nil

("read-sentence") "sentence"
'(#\space #\n #\u #\m #\b #\e #\r)
(=) #space ("car") "sentence"
("read-sentence") ("cdr") "sentence"

("read-sentence") "sentence"
'(#\( #\a #\b #\s #\) #\space #\n #\u #\m #\b #\e #\r))
(=) #( ("car") "sentence"
("cons")
  ("namefy") ("wrap") ("verb") ("gather-verb") ("cdr") "sentence"
  ("read-sentence")
    ("remove-leading") ("+") 2 ("length")
                               ("gather-verb")
                                 ("cdr") "sentence"
                       "sentence"

("read-sentence") "sentence"
'(#\n #\u #\m #\b #\e #\r)
(always)
("cons") ("noun") ("list->string") ("gather-noun") "sentence"
         ("read-sentence")
           ("remove-leading")
             ("length")
               ("gather-noun") "sentence"
             "sentence"

("verb") "gather-verb"
'(#\" #\q #\u #\o #\t #\e #\")
("and") ("not") ("null?") ("cdr") "gather-verb"
        ("and") (=) #" ("car") "gather-verb"
                (=) #" ("car") ("reverse") "gather-verb"
("list->string")
  ("cdr") ("reverse") ("cdr") ("reverse") "gather-verb"

("verb") "gather-verb"
'(#\q #\u #\o #\t #\e)
(always)
("string->symbol") ("list->string") "gather-verb"

("noun") "string"
".5"
(always)
("noun-number") "string" ("string->number") "string"

("noun-number") "noun" "number"
".5" 0.5
(always)
("namefy") ("noun-number1") "noun" "number"

("noun-number1") "noun" "number"
".5" 0.5
"number"
"number"

("noun-number1") "noun" "number"
"\"square\"" #false
("and") (=) #" ("car") ("string->list") "noun"
        (=) #" ("car") ("reverse") ("string->list") "noun"
("list->string")
  ("cdr") ("reverse") ("cdr") ("reverse") ("string->list") "noun"

("noun-number1") "noun" "number"
"square" #false
(always)
("string->symbol") "noun"

("read-sentences") "sentences"
'((#\( #\s #\q #\u #\a #\r #\e #\) #\space #\x)
  (#\( #\a #\l #\w #\a #\y #\s #\))
  (#\( #\" #\* #\" #\) #\space #\x #\space #\x))
(always)
("map") "read-sentence" "sentences"

("gather-verb") "sentence"
'(#\) #\space #\x)
(=) #) ("car") "sentence"
nil

("gather-verb") "sentence"
'(#\s #\q #\u #\a #\r #\e #\) #\space #\x)
(always)
("cons") ("car") "sentence"
         ("gather-verb") ("cdr") "sentence"

("gather-noun") "sentence"
nil
("null?") "sentence"
nil

("gather-noun") "sentence"
'(#\space #\n #\u #\m #\b #\e #\r #\2)
(=) #space ("car") "sentence"
nil

("gather-noun") "sentence"
'(#\n #\u #\m #\b #\e #\r #\1 #\space #\n #\u #\m #\b #\e #\r #\2)
(always)
("cons") ("car") "sentence"
         ("gather-noun") ("cdr") "sentence"

("by-three") "program"
nil
("null?") "program"
nil

("by-three") "program"
'(1 2 3 4 5 6 7 8 9)
(always)
("cons")
  ("wrap3")
    ("car") "program"
    ("cadr") "program"
    ("caddr") "program"
  ("by-three") ("cdddr") "program"

("do-it") "candidates"
comment
(always)
("map") "it" "candidates"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap6") #Z #E #D #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap6") #Z #E #D #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap8") #Z #E #D #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap7") #Z #E #D #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap7") #Z #E #D #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap6") #Z #E #D #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap8") #Z #E #D #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap8") #Z #E #D #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap7") #Z #E #D #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap6") #Z #E #D #t #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap9") #Z #E #D #e #l #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap9") #Z #E #D #t #w #e #l #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap11") #Z #E #D #t #h #i #r #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap11") #Z #E #D #f #o #u #r #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap10") #Z #E #D #f #i #f #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap10") #Z #E #D #s #i #x #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #s #e #v #e #n #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap11") #Z #E #D #e #i #g #h #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap11") #Z #E #D #n #i #n #e #t #e #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap9") #Z #E #D #t #w #e #n #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #t #w #e #n #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #t #w #e #n #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #t #w #e #n #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #t #w #e #n #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #t #w #e #n #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #t #w #e #n #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #t #w #e #n #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #t #w #e #n #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #t #w #e #n #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap9") #Z #E #D #t #h #i #r #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #t #h #i #r #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #t #h #i #r #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #t #h #i #r #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #t #h #i #r #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #t #h #i #r #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #t #h #i #r #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #t #h #i #r #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #t #h #i #r #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #t #h #i #r #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap8") #Z #E #D #f #o #r #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #f #o #r #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #f #o #r #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #f #o #r #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #f #o #r #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #f #o #r #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #f #o #r #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #f #o #r #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #f #o #r #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #f #o #r #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap8") #Z #E #D #f #i #f #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #f #i #f #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #f #i #f #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #f #i #f #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #f #i #f #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #f #i #f #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #f #i #f #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #f #i #f #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #f #i #f #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #f #i #f #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap8") #Z #E #D #s #i #x #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #s #i #x #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #s #i #x #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #s #i #x #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #s #i #x #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #s #i #x #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap12") #Z #E #D #s #i #x #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #s #i #x #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #s #i #x #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #s #i #x #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap10") #Z #E #D #s #e #v #e #n #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #s #e #v #e #n #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #s #e #v #e #n #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap16") #Z #E #D #s #e #v #e #n #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #s #e #v #e #n #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #s #e #v #e #n #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #s #e #v #e #n #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap16") #Z #E #D #s #e #v #e #n #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap16") #Z #E #D #s #e #v #e #n #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #s #e #v #e #n #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap9") #Z #E #D #e #i #g #h #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #e #i #g #h #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #e #i #g #h #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #e #i #g #h #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #e #i #g #h #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #e #i #g #h #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #e #i #g #h #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #e #i #g #h #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #e #i #g #h #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #e #i #g #h #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap9") #Z #E #D #n #i #n #e #t #y
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #n #i #n #e #t #y #- #o #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #n #i #n #e #t #y #- #t #w #o
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #n #i #n #e #t #y #- #t #h #r #e #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #n #i #n #e #t #y #- #f #o #u #r
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #n #i #n #e #t #y #- #f #i #v #e
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap13") #Z #E #D #n #i #n #e #t #y #- #s #i #x
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #n #i #n #e #t #y #- #s #e #v #e #n
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap15") #Z #E #D #n #i #n #e #t #y #- #e #i #g #h #t
("replace-candidate") "candidate"

("it") "candidate"
comment
("candidate-confirmed?") "candidate" ("wrap14") #Z #E #D #n #i #n #e #t #y #- #n #i #n #e
("replace-candidate") "candidate"

("it") "candidate"
comment
(always)
"candidate"

("replace-candidate") "candidate"
comment
("null?") "candidate"
nil

("replace-candidate") "candidate"
comment
(=) #( ("car") "candidate"
("cons") #( ("replace-candidate") ("cdr") "candidate"

("replace-candidate") "candidate"
comment
(always)
nil

("candidate-confirmed?") "candidate" "confirmed"
comment
("null?") "confirmed"
("or") ("null?") "candidate"
       ("or") (=) #space ("car") "candidate"
              (=) #tab ("car") "candidate"

("candidate-confirmed?") "candidate" "confirmed"
comment
("null?") "candidate"
"#false"

("candidate-confirmed?") "candidate" "confirmed"
comment
(=) #( ("car") "candidate"
("candidate-confirmed?") ("cdr") "candidate" "confirmed"

("candidate-confirmed?") "candidate" "confirmed"
comment
(always)
("and") (=) ("car") "candidate" ("car") "confirmed"
        ("candidate-confirmed?") ("cdr") "candidate" ("cdr") "confirmed"

("strip") "program"
comment
(always)
("foldr") "append" nil ("do-it") ("strip1") "program"

("strip1") "program"
comment
("null?") "program"
nil

("strip1") "program"
comment
(=) ("car") "program" #(
("strip2") ("grab-candidate") "program" "program"

("strip1") "program"
comment
(always)
("cons") ("wrap") ("car") "program"
         ("strip1") ("cdr") "program"

("grab-candidate") "program"
comment
(always)
("cons") #( ("grab-candidate1") ("cdr") "program"

("grab-candidate1") "program"
comment
("null?") "program"
nil

("grab-candidate1") "program"
comment
("or") (=) #space ("car") "program"
       (=) #tab ("car") "program"
("grab-candidate2") "program"

("grab-candidate1") "program"
comment
(always)
("cons") ("car") "program" ("grab-candidate1") ("cdr") "program"

("grab-candidate2") "program"
comment
("null?") "program"
nil

("grab-candidate2") "program"
comment
(=) #space ("car") "program"
("cons") #space ("grab-candidate2") ("cdr") "program"

("grab-candidate2") "program"
comment
(=) #tab ("car") "program"
("cons") #tab ("grab-candidate2") ("cdr") "program"

("grab-candidate2") "program"
comment
(always)
nil

("strip2") "candidate" "program"
comment
(always)
("cons") "candidate" 
         ("strip1") ("remove-leading") ("length") "candidate" "program"

("write-all!") "output-file" "program"
comment
("null?") "program"
("close-output-port") "output-file"

("write-all!") "output-file" "program"
comment
(always)
("begin") ("write-char") ("car") "program" "output-file"
          ("write-all!") "output-file" ("cdr") "program"

("my-compile")
comment: compile it
(always)
("my-compile1")
  ("open-input-file")
    ("must-get-file")
  ("open-input-file")
    ""C:\\Users\\Zelah\\Desktop\\ZEDWIN\\PRELUDE.txt""
  ""C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP""
  ("begin") ("when-file-exists")
              ""C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP""
            ("open-output-file")
              ""C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP""
  ("begin") ("when-file-exists")
              ""C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt""
            ("open-output-file")
              ""C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt""

("must-get-file")
comment
(always)
("must-get-file1") ("get-file")

("must-get-file1") path
comment
path
path

("must-get-file1") path
comment
(always)
("must-get-file")

("when-file-exists") "path"
comment: ensure file can be written
("file-exists?") "path"
("delete-file") "path"

("not-return?") character
#Z
(always)
("not") (=) #return character

("my-compile1") "ZED" "PRELUDE" "TEMP-path" "TEMP" "RACKET"
comment: generate combined
(always)
("my-compile2") "ZED"
                "PRELUDE"
                "TEMP-path"
                "TEMP"
                "RACKET"
                ("combine-program-clauses")
                  ("by-three")
                    ("read-sentences")
                      ("discard-comments")
                        ("sentences")
                          ("leading-newlines")
                            ("space-newline")
                              ("tab-replace")
                                ("newline-space-tab-repeats")
                                  ("newline-space")
                                    ("filter") "not-return?"
                                               ("append") ("append")
                                                 ("read-all!") "PRELUDE"
                                                 ("wrap2") #newline #newline
                                                 ("read-all!") "ZED"

("my-compile2") "ZED" "PRELUDE" "TEMP-path" "TEMP" "RACKET" "combined"
comment: programize program
(always)
("my-compile3") "ZED"
                "PRELUDE"
                "TEMP-path"
                "TEMP"
                "RACKET"
                ("programize") "combined" ("arity-hash") "combined"

("my-compile3") "ZED" "PRELUDE" "TEMP-path" "TEMP" "RACKET" "programized"
comment: write out the compiled program
(always)
("begin") ("display") ""#lang"" "TEMP"
          ("begin") ("display") #space "TEMP"
          ("begin") ("display") ""racket/gui"" "TEMP"
          ("begin") ("newline") "TEMP"
          ("begin") ("display") ("primitives") "TEMP"
          ("begin") ("newline") "TEMP"
          ("begin") ("display") "programized" "TEMP"
          ("begin") ("close-output-port") "TEMP"
          ("my-compile4") ("open-input-file") "TEMP-path" "RACKET"

("my-compile4") "TEMP" "RACKET"
comment
(always)
("write-all!") "RACKET" ("strip") ("read-all!") "TEMP"