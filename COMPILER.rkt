#lang racket/gui

(provide my-compile)(begin (define wrap list) (define wrap2 list) (define wrap3 list) (define wrap4 list) (define wrap5 list) (define wrap6 list) (define wrap7 list) (define wrap8 list) (define wrap9 list) (define wrap10 list) (define wrap11 list) (define wrap12 list) (define wrap13 list) (define wrap14 list) (define wrap15 list) (define wrap16 list) (define-syntax ZEDand (syntax-rules () ((_ a b) (and a b)))) (define-syntax ZEDor (syntax-rules () ((_ a b) (or a b)))) (define-syntax ZEDse (syntax-rules () ((_ a b) (begin a b)))) (define-syntax ZEDc (syntax-rules () ((_ a b) (cons (delay a) (delay b))))) (define (ZED1 pair) (force (car pair))) (define (ZED! pair) (force (cdr pair))) (define ZED= eqv?) (define ZEDerr (quote err)) (define ZEDnil (quote ())) (define (ZEDalways) #t) (define-syntax apply1 (syntax-rules () ((_ a b c d) (apply a b c d)))) (define-syntax apply2 (syntax-rules () ((_ a b c d e f) (apply a b c d e f)))) (define-syntax apply3 (syntax-rules () ((_ a b c d e f g h) (apply a b c d e f g h)))) (define-syntax apply4 (syntax-rules () ((_ a b c d e f g h i j) (apply a b c d e f g h i j)))) (define-syntax apply5 (syntax-rules () ((_ a b c d e f g h i j k l) (apply a b c d e f g h i j k l)))) (define-syntax ZEDquote (syntax-rules () ((_ a) (quote a)))))
(begin (define (my-flatten tree) (cond ((not (pair? tree)) tree) ((null? (car tree)) (my-flatten (cdr tree))) ((pair? (car tree)) (append (my-flatten (car tree)) (my-flatten (cdr tree)))) ((not (pair? (car tree))) (cons (car tree) (my-flatten (cdr tree)))) (else ZEDerr))) (define (remove-leading number list) (cond ((null? list) ZEDnil) ((= number 0) list) ((> number 0) (remove-leading (- number 1) (cdr list))) (else ZEDerr))) (define (ZEDefy string) (cond ((ZEDalways) (string->symbol (list->string (append (wrap3 #\Z #\E #\D) (my-flatten (map symbol-character (string->list string))))))) (else ZEDerr))) (define (symbol-character character) (cond ((ZED= character #\[) (wrap2 #\@ #\1)) ((ZED= character #\]) (wrap2 #\@ #\2)) ((ZED= character #\{) (wrap2 #\@ #\3)) ((ZED= character #\}) (wrap2 #\@ #\4)) ((ZED= character #\') (wrap2 #\@ #\q)) ((ZED= character #\`) (wrap2 #\@ #\Q)) ((ZED= character #\,) (wrap2 #\@ #\c)) ((ZED= character #\;) (wrap2 #\@ #\s)) ((ZED= character #\\) (wrap2 #\@ #\b)) ((not (char-graphic? character)) (wrap2 #\@ #\w)) ((char-graphic? character) character) (else ZEDerr))) (define (clause-name clause) (cond ((ZEDalways) (car clause)) (else ZEDerr))) (define (clause-arguments clause) (cond ((ZEDalways) (cadr clause)) (else ZEDerr))) (define (clause-arity clause) (cond ((ZEDalways) (length (clause-arguments clause))) (else ZEDerr))) (define (clause-body clause) (cond ((ZEDalways) (cddr clause)) (else ZEDerr))) (define (clause-name-agree clause1 clause2) (cond ((eq? (clause-name clause1) (clause-name clause2)) (clause-name clause1)) (else ZEDerr))) (define (clause-arguments-agree clause1 clause2) (cond ((equal? (clause-arguments clause1) (clause-arguments clause2)) (clause-arguments clause1)) (else ZEDerr))) (define (combine-clauses clause1 clause2) (cond ((ZEDalways) (cons (clause-name-agree clause1 clause2) (cons (clause-arguments-agree clause1 clause2) (append (clause-body clause1) (clause-body clause2))))) (else ZEDerr))) (define (combine-head-clauses program) (cond ((ZEDalways) (cons (combine-clauses (car program) (cadr program)) (cddr program))) (else ZEDerr))) (define (ready-clause clause) (cond ((ZEDalways) (cons (caaar clause) (cons (cdar clause) (cdr clause)))) (else ZEDerr))) (define (ready-program program) (cond ((ZEDalways) (map ready-clause program)) (else ZEDerr))) (define (combine-all program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((ZED= (clause-name (car program)) (clause-name (cadr program))) (combine-all (combine-head-clauses program))) ((not (ZED= (clause-name (car program)) (clause-name (cadr program)))) (cons (car program) (combine-all (cdr program)))) (else ZEDerr))) (define (combine-program-clauses program) (cond ((ZEDalways) (combine-all (ready-program program))) (else ZEDerr))) (define (arity-hash program) (cond ((ZEDalways) (make-hasheq (append (map arity-hash1 program) (append (wrap16 (cons 'wrap 1) (cons 'wrap2 2) (cons 'wrap3 3) (cons 'wrap4 4) (cons 'wrap5 5) (cons 'wrap6 6) (cons 'wrap7 7) (cons 'wrap8 8) (cons 'wrap9 9) (cons 'wrap10 10) (cons 'wrap11 11) (cons 'wrap12 12) (cons 'wrap13 13) (cons 'wrap14 14) (cons 'wrap15 15) (cons 'wrap16 16)) (append (wrap16 (cons 'and 2) (cons 'append 2) (cons 'assoc 2) (cons 'begin 2) (cons 'boolean? 1) (cons 'caaar 1) (cons 'cadr 1) (cons 'caddr 1) (cons 'cadddr 1) (cons 'car 1) (cons 'cdar 1) (cons 'cddddr 1) (cons 'cddr 1) (cons 'cdr 1) (cons 'char? 1) (cons 'char-numeric? 1)) (append (wrap16 (cons 'char-graphic? 1) (cons 'close-input-port 1) (cons 'close-output-port 1) (cons 'cons 2) (cons 'define 2) (cons 'delete-file 1) (cons 'display 2) (cons 'eq? 2) (cons 'equal? 2) (cons 'eof-object? 1) (cons 'exact? 1) (cons 'file-exists? 1) (cons 'inexact? 1) (cons 'length 1) (cons 'list->string 1) (cons 'map 2)) (append (wrap16 (cons 'not 1) (cons 'null? 1) (cons 'number? 1) (cons 'newline 1) (cons 'number->string 1) (cons 'or 2) (cons 'open-input-file 1) (cons 'open-output-file 1) (cons 'pair? 1) (cons 'quote 1) (cons 'reverse 1) (cons 'read-char 1) (cons 'symbol? 1) (cons 'string? 1) (cons 'string-append 2) (cons 'string->symbol 1)) (append (wrap16 (cons 'symbol->string 1) (cons 'string->list 1) (cons 'string->number 1) (cons '= 2) (cons '< 2) (cons '> 2) (cons '- 2) (cons '+ 2) (cons '* 2) (cons '/ 2) (cons 'ZED1 1) (cons 'ZED! 1) (cons 'ZEDc 2) (cons 'ZED001 1) (cons 'ZED002 2) (cons 'ZED003 3)) (append (wrap16 (cons 'ZED004 4) (cons 'ZED005 5) (cons 'ZED006 6) (cons 'ZED007 7) (cons 'ZED008 8) (cons 'ZED009 9) (cons 'ZED010 10) (cons 'force 1) (cons 'ZED= 2) (cons 'caar 1) (cons 'cdddr 1) (cons 'list 0) (cons 'ZEDalways 0) (cons 'apply 2) (cons 'ZEDse 2) (cons 'ZEDand 2)) (append (wrap16 (cons 'ZEDor 2) (cons 'ZED011 11) (cons 'ZED012 12) (cons 'ZED013 13) (cons 'ZED014 14) (cons 'ZED015 15) (cons 'ZED016 16) (cons 'ZED017 17) (cons 'ZED018 18) (cons 'ZED019 19) (cons 'ZED020 20) (cons 'ZED021 21) (cons 'ZED022 22) (cons 'ZED023 23) (cons 'ZED024 24) (cons 'ZED025 25)) (append (wrap16 (cons 'ZED026 26) (cons 'ZED027 27) (cons 'ZED028 28) (cons 'ZED029 29) (cons 'ZED030 30) (cons 'ZED031 31) (cons 'ZED032 32) (cons 'get-file 0) (cons 'make-hasheq 1) (cons 'hash-ref 2) (cons 'apply1 4) (cons 'apply2 6) (cons 'apply3 8) (cons 'apply4 10) (cons 'apply5 12) (cons 'filter 2)) (append (wrap16 (cons 'foldr 3) (cons 'function-hack-2 2) (cons 'write-char 2) (cons 'ZED033 33) (cons 'ZED034 34) (cons 'ZED035 35) (cons 'ZED036 36) (cons 'ZED037 37) (cons 'ZED038 38) (cons 'ZED039 39) (cons 'ZED040 40) (cons 'ZED041 41) (cons 'ZED042 42) (cons 'ZED043 43) (cons 'ZED044 44) (cons 'ZED045 45)) (append (wrap16 (cons 'ZED046 46) (cons 'ZED047 47) (cons 'ZED048 48) (cons 'ZED049 49) (cons 'ZED050 50) (cons 'ZED051 51) (cons 'ZED052 52) (cons 'ZED053 53) (cons 'ZED054 54) (cons 'ZED055 55) (cons 'ZED056 56) (cons 'ZED057 57) (cons 'ZED058 58) (cons 'ZED059 59) (cons 'ZED060 60) (cons 'ZED061 61)) (append (wrap16 (cons 'ZED062 62) (cons 'ZED063 63) (cons 'ZED064 64) (cons 'ZED065 65) (cons 'ZED066 66) (cons 'ZED067 67) (cons 'ZED068 68) (cons 'ZED069 69) (cons 'ZED070 70) (cons 'ZED071 71) (cons 'ZED072 72) (cons 'ZED073 73) (cons 'ZED074 74) (cons 'ZED075 75) (cons 'ZED076 76) (cons 'ZED077 77)) (append (wrap16 (cons 'ZED078 78) (cons 'ZED079 79) (cons 'ZED080 80) (cons 'ZED081 81) (cons 'ZED082 82) (cons 'ZED083 83) (cons 'ZED084 84) (cons 'ZED085 85) (cons 'ZED086 86) (cons 'ZED087 87) (cons 'ZED088 88) (cons 'ZED089 89) (cons 'ZED090 90) (cons 'ZED091 91) (cons 'ZED092 92) (cons 'ZED093 93)) (wrap7 (cons 'ZED094 94) (cons 'ZED095 95) (cons 'ZED096 96) (cons 'ZED097 97) (cons 'ZED098 98) (cons 'ZED099 99) (cons 'ZEDquote 1))))))))))))))))) (else ZEDerr))) (define (arity-hash1 clause) (cond ((ZEDalways) (cons (clause-name clause) (clause-arity clause))) (else ZEDerr))) (define (arity arity-hash function) (cond ((ZEDalways) (hash-ref arity-hash function)) (else ZEDerr))) (define (primitives) (cond ((ZEDalways) (append (wrap16 'begin (quote (define wrap list)) (quote (define wrap2 list)) (quote (define wrap3 list)) (quote (define wrap4 list)) (quote (define wrap5 list)) (quote (define wrap6 list)) (quote (define wrap7 list)) (quote (define wrap8 list)) (quote (define wrap9 list)) (quote (define wrap10 list)) (quote (define wrap11 list)) (quote (define wrap12 list)) (quote (define wrap13 list)) (quote (define wrap14 list)) (quote (define wrap15 list))) (append (wrap16 (quote (define wrap16 list)) (wrap3 'define-syntax 'ZEDand (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'and 'a 'b)))) (wrap3 'define-syntax 'ZEDor (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'or 'a 'b)))) (wrap3 'define-syntax 'ZEDse (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'begin 'a 'b)))) (wrap3 'define-syntax 'ZEDc (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'cons (wrap2 'delay 'a) (wrap2 'delay 'b))))) (quote (define (ZED1 pair) (force (car pair)))) (quote (define (ZED! pair) (force (cdr pair)))) (quote (define ZED= eqv?)) (quote (define ZEDerr 'err)) (wrap3 'define 'ZEDnil (wrap2 'quote ZEDnil)) (quote (define (ZEDalways) #true)) (wrap3 'define-syntax 'apply1 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap5 '_ 'a 'b 'c 'd) (wrap5 'apply 'a 'b 'c 'd)))) (wrap3 'define-syntax 'apply2 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap7 '_ 'a 'b 'c 'd 'e 'f) (wrap7 'apply 'a 'b 'c 'd 'e 'f)))) (wrap3 'define-syntax 'apply3 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap9 '_ 'a 'b 'c 'd 'e 'f 'g 'h) (wrap9 'apply 'a 'b 'c 'd 'e 'f 'g 'h)))) (wrap3 'define-syntax 'apply4 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap11 '_ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j) (wrap11 'apply 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j)))) (wrap3 'define-syntax 'apply5 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap13 '_ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l) (wrap13 'apply 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l))))) (wrap (wrap3 'define-syntax 'ZEDquote (wrap3 'syntax-rules ZEDnil (wrap2 (wrap2 '_ 'a) (wrap2 'quote 'a)))))))) (else ZEDerr))) (define (application? expression) (cond ((ZEDalways) (and (not (null? expression)) (pair? (car expression)))) (else ZEDerr))) (define (function expression) (cond ((ZEDalways) (caar expression)) (else ZEDerr))) (define (double-application? expression) (cond ((null? expression) #false) ((null? (cdr expression)) #false) ((ZEDalways) (and (pair? (car expression)) (pair? (cadr expression)))) (else ZEDerr))) (define (schemefy expression arity-hash) (cond ((ZEDalways) (wrap (schemefy1 expression arity-hash))) (else ZEDerr))) (define (schemefy1 expression arity-hash) (cond ((not (application? expression)) (car expression)) ((ZED= 0 (arity arity-hash (function expression))) (car expression)) ((double-application? expression) (cons (function expression) (cons (schemefy1 (cdr expression) arity-hash) (gather (- (arity arity-hash (function expression)) 1) (remove-leading (+ 1 (length (my-flatten (schemefy1 (cdr expression) arity-hash)))) expression) arity-hash)))) ((application? expression) (cons (function expression) (gather (arity arity-hash (function expression)) (cdr expression) arity-hash))) (else ZEDerr))) (define (gather how-many expression arity-hash) (cond ((= how-many 0) ZEDnil) ((application? expression) (append (schemefy expression arity-hash) (gather (- how-many 1) (remove-leading (length (my-flatten (schemefy expression arity-hash))) expression) arity-hash))) ((not (application? expression)) (cons (car expression) (gather (- how-many 1) (cdr expression) arity-hash))) (else ZEDerr))) (define (map-with function list extra) (cond ((null? list) ZEDnil) ((not (null? list)) (cons (function (car list) extra) (map-with function (cdr list) extra))) (else ZEDerr))) (define (functionize clause arity-hash) (cond ((ZEDalways) (wrap3 'define (cons (clause-name clause) (clause-arguments clause)) (cons 'cond (append (condefy (map-with schemefy (clause-body clause) arity-hash)) (wrap (wrap2 'else 'ZEDerr)))))) (else ZEDerr))) (define (condefy expressions) (cond ((null? expressions) ZEDnil) ((ZEDalways) (cons (append (car expressions) (cadr expressions)) (condefy (cddr expressions)))) (else ZEDerr))) (define (programize program arity-hash) (cond ((ZEDalways) (cons 'begin (map-with functionize program arity-hash))) (else ZEDerr))) (define (namefy part-of-expression) (cond ((null? part-of-expression) ZEDnil) ((pair? part-of-expression) (wrap (symbolize (car part-of-expression)))) ((not (pair? part-of-expression)) (flexefy part-of-expression)) (else ZEDerr))) (define (symbolize part) (cond ((symbol? part) (ZEDefy (symbol->string part))) ((string? part) (string->symbol part)) ((number? part) (ZEDefy (number->string part))) (else ZEDerr))) (define (flexefy part) (cond ((symbol? part) (flexefy1 (string->list (symbol->string part)))) ((string? part) (string->symbol part)) ((boolean? part) part) ((char? part) part) ((exact? part) part) ((inexact? part) (string->number (string-append "#e" (number->string part)))) (else ZEDerr))) (define (flexefy1 list) (cond ((and (ZED= #\# (car list)) (and (ZED= #\0 (cadr list)) (not (null? (cddr list))))) (string->symbol (list->string (append (wrap3 #\# #\\ #\u) (cddr list))))) ((equal? list (wrap5 #\# #\t #\r #\u #\e)) #true) ((equal? list (wrap6 #\# #\f #\a #\l #\s #\e)) #false) ((ZED= (car list) #\#) (string->symbol (list->string (append (wrap2 #\# #\\) (cdr list))))) ((not (ZED= (car list) #\#)) (ZEDefy (list->string list))) (else ZEDerr))) (define (read-all! port) (cond ((ZEDalways) (read-all1 port (read-char port))) (else ZEDerr))) (define (read-all1 port character) (cond ((eof-object? character) (begin (close-input-port port) ZEDnil)) ((not (eof-object? character)) (cons character (read-all! port))) (else ZEDerr))) (define (newline-space program) (cond ((ZEDalways) (append (newline-space-again program) (wrap #\newline))) (else ZEDerr))) (define (newline-space1 program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\newline (car program)) (or (ZED= #\space (cadr program)) (ZED= #\tab (cadr program)))) (newline-space1 (cdr program))) ((ZED= #\newline (car program)) (cons #\newline (newline-space1 (cdr program)))) ((not (ZED= #\newline (car program))) (cons (car program) (newline-space1 (cdr program)))) (else ZEDerr))) (define (newline-space-again program) (cond ((ZEDalways) (newline-space-again1 program (newline-space1 program))) (else ZEDerr))) (define (newline-space-again1 program transformed-program) (cond ((equal? program transformed-program) program) ((ZEDalways) (newline-space-again transformed-program)) (else ZEDerr))) (define (newline-space-tab-repeats program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\newline (car program)) (ZED= #\newline (cadr program))) (newline-space-tab-repeats (cdr program))) ((and (or (ZED= #\space (car program)) (ZED= #\tab (car program))) (or (ZED= #\space (cadr program)) (ZED= #\tab (cadr program)))) (newline-space-tab-repeats (cdr program))) ((ZEDalways) (cons (car program) (newline-space-tab-repeats (cdr program)))) (else ZEDerr))) (define (tab-replace program) (cond ((null? program) ZEDnil) ((ZED= #\tab (car program)) (cons #\space (tab-replace (cdr program)))) ((ZEDalways) (cons (car program) (tab-replace (cdr program)))) (else ZEDerr))) (define (space-newline program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\space (car program)) (ZED= #\newline (cadr program))) (space-newline (cdr program))) ((ZEDalways) (cons (car program) (space-newline (cdr program)))) (else ZEDerr))) (define (leading-newlines program) (cond ((null? program) ZEDnil) ((ZED= #\newline (car program)) (cdr program)) ((ZEDalways) program) (else ZEDerr))) (define (sentences program) (cond ((ZEDalways) (sentences1 program ZEDnil)) (else ZEDerr))) (define (sentences1 program accumulator) (cond ((null? program) ZEDnil) ((ZED= #\newline (car program)) (cons (reverse accumulator) (sentences1 (cdr program) ZEDnil))) ((ZEDalways) (sentences1 (cdr program) (cons (car program) accumulator))) (else ZEDerr))) (define (discard-comments program) (cond ((null? program) ZEDnil) ((ZEDalways) (cons (car program) (cons (caddr program) (cons (cadddr program) (discard-comments (cddddr program)))))) (else ZEDerr))) (define (read-sentence sentence) (cond ((null? sentence) ZEDnil) ((ZED= #\space (car sentence)) (read-sentence (cdr sentence))) ((ZED= #\( (car sentence)) (cons (namefy (wrap (verb (gather-verb (cdr sentence))))) (read-sentence (remove-leading (+ 2 (length (gather-verb (cdr sentence)))) sentence)))) ((ZEDalways) (cons (noun (list->string (gather-noun sentence))) (read-sentence (remove-leading (length (gather-noun sentence)) sentence)))) (else ZEDerr))) (define (verb gather-verb) (cond ((and (not (null? (cdr gather-verb))) (and (ZED= #\" (car gather-verb)) (ZED= #\" (car (reverse gather-verb))))) (list->string (cdr (reverse (cdr (reverse gather-verb)))))) ((ZEDalways) (string->symbol (list->string gather-verb))) (else ZEDerr))) (define (noun string) (cond ((ZEDalways) (noun-number string (string->number string))) (else ZEDerr))) (define (noun-number noun number) (cond ((ZEDalways) (namefy (noun-number1 noun number))) (else ZEDerr))) (define (noun-number1 noun number) (cond (number number) ((and (ZED= #\" (car (string->list noun))) (ZED= #\" (car (reverse (string->list noun))))) (list->string (cdr (reverse (cdr (reverse (string->list noun))))))) ((ZEDalways) (string->symbol noun)) (else ZEDerr))) (define (read-sentences sentences) (cond ((ZEDalways) (map read-sentence sentences)) (else ZEDerr))) (define (gather-verb sentence) (cond ((ZED= #\) (car sentence)) ZEDnil) ((ZEDalways) (cons (car sentence) (gather-verb (cdr sentence)))) (else ZEDerr))) (define (gather-noun sentence) (cond ((null? sentence) ZEDnil) ((ZED= #\space (car sentence)) ZEDnil) ((ZEDalways) (cons (car sentence) (gather-noun (cdr sentence)))) (else ZEDerr))) (define (by-three program) (cond ((null? program) ZEDnil) ((ZEDalways) (cons (wrap3 (car program) (cadr program) (caddr program)) (by-three (cdddr program)))) (else ZEDerr))) (define (do-it candidates) (cond ((ZEDalways) (map it candidates)) (else ZEDerr))) (define (it candidate) (cond ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\0 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\1 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\2 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\3 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\4 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\5 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\6 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\7 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\8 #\9)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\0)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\1)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\2)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\3)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\4)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\5)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\6)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\7)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\8)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\0 #\9 #\9)) (replace-candidate candidate)) ((ZEDalways) candidate) (else ZEDerr))) (define (replace-candidate candidate) (cond ((null? candidate) ZEDnil) ((ZED= #\( (car candidate)) (cons #\( (replace-candidate (cdr candidate)))) ((ZEDalways) ZEDnil) (else ZEDerr))) (define (candidate-confirmed? candidate confirmed) (cond ((null? confirmed) (or (null? candidate) (or (ZED= #\space (car candidate)) (ZED= #\tab (car candidate))))) ((null? candidate) #false) ((ZED= #\( (car candidate)) (candidate-confirmed? (cdr candidate) confirmed)) ((ZEDalways) (and (ZED= (car candidate) (car confirmed)) (candidate-confirmed? (cdr candidate) (cdr confirmed)))) (else ZEDerr))) (define (strip program) (cond ((ZEDalways) (foldr append ZEDnil (do-it (strip1 program)))) (else ZEDerr))) (define (strip1 program) (cond ((null? program) ZEDnil) ((ZED= (car program) #\() (strip2 (grab-candidate program) program)) ((ZEDalways) (cons (wrap (car program)) (strip1 (cdr program)))) (else ZEDerr))) (define (grab-candidate program) (cond ((ZEDalways) (cons #\( (grab-candidate1 (cdr program)))) (else ZEDerr))) (define (grab-candidate1 program) (cond ((null? program) ZEDnil) ((or (ZED= #\space (car program)) (ZED= #\tab (car program))) (grab-candidate2 program)) ((ZEDalways) (cons (car program) (grab-candidate1 (cdr program)))) (else ZEDerr))) (define (grab-candidate2 program) (cond ((null? program) ZEDnil) ((ZED= #\space (car program)) (cons #\space (grab-candidate2 (cdr program)))) ((ZED= #\tab (car program)) (cons #\tab (grab-candidate2 (cdr program)))) ((ZEDalways) ZEDnil) (else ZEDerr))) (define (strip2 candidate program) (cond ((ZEDalways) (cons candidate (strip1 (remove-leading (length candidate) program)))) (else ZEDerr))) (define (write-all! output-file program) (cond ((null? program) (close-output-port output-file)) ((ZEDalways) (begin (write-char (car program) output-file) (write-all! output-file (cdr program)))) (else ZEDerr))) (define (my-compile) (cond ((ZEDalways) (my-compile1 (open-input-file (must-get-file)) (open-input-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\PRELUDE.txt") "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP" (begin (when-file-exists "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP") (open-output-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP")) (begin (when-file-exists "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt") (open-output-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt")))) (else ZEDerr))) (define (must-get-file) (cond ((ZEDalways) (must-get-file1 (get-file))) (else ZEDerr))) (define (must-get-file1 ZEDpath) (cond (ZEDpath ZEDpath) ((ZEDalways) (must-get-file)) (else ZEDerr))) (define (when-file-exists path) (cond ((file-exists? path) (delete-file path)) (else ZEDerr))) (define (not-return? ZEDcharacter) (cond ((ZEDalways) (not (ZED= #\return ZEDcharacter))) (else ZEDerr))) (define (my-compile1 ZED PRELUDE TEMP-path TEMP RACKET) (cond ((ZEDalways) (my-compile2 ZED PRELUDE TEMP-path TEMP RACKET (combine-program-clauses (by-three (read-sentences (discard-comments (sentences (leading-newlines (space-newline (tab-replace (newline-space-tab-repeats (newline-space (filter not-return? (append (append (read-all! PRELUDE) (wrap2 #\newline #\newline)) (read-all! ZED))))))))))))))) (else ZEDerr))) (define (my-compile2 ZED PRELUDE TEMP-path TEMP RACKET combined) (cond ((ZEDalways) (my-compile3 ZED PRELUDE TEMP-path TEMP RACKET (programize combined (arity-hash combined)))) (else ZEDerr))) (define (my-compile3 ZED PRELUDE TEMP-path TEMP RACKET programized) (cond ((ZEDalways) (begin (display "#lang" TEMP) (begin (display #\space TEMP) (begin (display "racket/gui" TEMP) (begin (newline TEMP) (begin (display (primitives) TEMP) (begin (newline TEMP) (begin (display programized TEMP) (begin (close-output-port TEMP) (my-compile4 (open-input-file TEMP-path) RACKET)))))))))) (else ZEDerr))) (define (my-compile4 TEMP RACKET) (cond ((ZEDalways) (write-all! RACKET (strip (read-all! TEMP)))) (else ZEDerr))))