#lang racket/gui

(provide my-compile)(begin (define wrap list) (define wrap2 list) (define wrap3 list) (define wrap4 list) (define wrap5 list) (define wrap6 list) (define wrap7 list) (define wrap8 list) (define wrap9 list) (define wrap10 list) (define wrap11 list) (define wrap12 list) (define wrap13 list) (define wrap14 list) (define wrap15 list) (define wrap16 list) (define-syntax ZEDand (syntax-rules () ((_ a b) (and a b)))) (define-syntax ZEDor (syntax-rules () ((_ a b) (or a b)))) (define-syntax ZEDse (syntax-rules () ((_ a b) (begin a b)))) (define-syntax ZEDc (syntax-rules () ((_ a b) (cons (delay a) (delay b))))) (define (ZED1 pair) (force (car pair))) (define (ZED! pair) (force (cdr pair))) (define ZED= eqv?) (define ZEDerr (quote err)) (define ZEDnil (quote ())) (define (ZEDalways) #t) (define-syntax apply1 (syntax-rules () ((_ a b c d) (apply a b c d)))) (define-syntax apply2 (syntax-rules () ((_ a b c d e f) (apply a b c d e f)))) (define-syntax apply3 (syntax-rules () ((_ a b c d e f g h) (apply a b c d e f g h)))) (define-syntax apply4 (syntax-rules () ((_ a b c d e f g h i j) (apply a b c d e f g h i j)))) (define-syntax apply5 (syntax-rules () ((_ a b c d e f g h i j k l) (apply a b c d e f g h i j k l)))))
(begin (define (ZED2 ZEDlist) (cond ((ZEDalways) (ZEDref 2 ZEDlist)) (else ZEDerr))) (define (ZED3 ZEDlist) (cond ((ZEDalways) (ZEDref 3 ZEDlist)) (else ZEDerr))) (define (ZED4 ZEDlist) (cond ((ZEDalways) (ZEDref 4 ZEDlist)) (else ZEDerr))) (define (ZED5 ZEDlist) (cond ((ZEDalways) (ZEDref 5 ZEDlist)) (else ZEDerr))) (define (ZED6 ZEDlist) (cond ((ZEDalways) (ZEDref 6 ZEDlist)) (else ZEDerr))) (define (ZED7 ZEDlist) (cond ((ZEDalways) (ZEDref 7 ZEDlist)) (else ZEDerr))) (define (ZED8 ZEDlist) (cond ((ZEDalways) (ZEDref 8 ZEDlist)) (else ZEDerr))) (define (ZED9 ZEDlist) (cond ((ZEDalways) (ZEDref 9 ZEDlist)) (else ZEDerr))) (define (ZED10 ZEDlist) (cond ((ZEDalways) (ZEDref 10 ZEDlist)) (else ZEDerr))) (define (ZED-2 ZEDlist) (cond ((ZEDalways) (ZEDtails 2 ZEDlist)) (else ZEDerr))) (define (ZED-3 ZEDlist) (cond ((ZEDalways) (ZEDtails 3 ZEDlist)) (else ZEDerr))) (define (ZED-4 ZEDlist) (cond ((ZEDalways) (ZEDtails 4 ZEDlist)) (else ZEDerr))) (define (ZED-5 ZEDlist) (cond ((ZEDalways) (ZEDtails 5 ZEDlist)) (else ZEDerr))) (define (ZED-6 ZEDlist) (cond ((ZEDalways) (ZEDtails 6 ZEDlist)) (else ZEDerr))) (define (ZED-7 ZEDlist) (cond ((ZEDalways) (ZEDtails 7 ZEDlist)) (else ZEDerr))) (define (ZED-8 ZEDlist) (cond ((ZEDalways) (ZEDtails 8 ZEDlist)) (else ZEDerr))) (define (ZED-9 ZEDlist) (cond ((ZEDalways) (ZEDtails 9 ZEDlist)) (else ZEDerr))) (define (ZED-10 ZEDlist) (cond ((ZEDalways) (ZEDtails 10 ZEDlist)) (else ZEDerr))) (define (ZED< ZEDone ZEDtwo) (cond ((ZEDalways) (apply < (wrap2 ZEDone ZEDtwo))) (else ZEDerr))) (define (ZED> ZEDone ZEDtwo) (cond ((ZEDalways) (apply > (wrap2 ZEDone ZEDtwo))) (else ZEDerr))) (define (ZED- ZEDone ZEDtwo) (cond ((ZEDalways) (apply - (wrap2 ZEDone ZEDtwo))) (else ZEDerr))) (define (ZED+ ZEDone ZEDtwo) (cond ((ZEDalways) (apply + (wrap2 ZEDone ZEDtwo))) (else ZEDerr))) (define (ZED* ZEDone ZEDtwo) (cond ((ZEDalways) (apply * (wrap2 ZEDone ZEDtwo))) (else ZEDerr))) (define (ZED/ ZEDone ZEDtwo) (cond ((ZEDalways) (apply / (wrap2 ZEDone ZEDtwo))) (else ZEDerr))) (define (ZEDadd1 ZEDnumber) (cond ((ZEDalways) (apply add1 (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDadd-between ZEDitem ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDnull? (ZED! ZEDlist)) ZEDlist) ((ZEDnot (ZEDnull? (ZED! ZEDlist))) (ZEDc (ZED1 ZEDlist) (ZEDc ZEDitem (ZEDadd-between ZEDitem (ZED! ZEDlist))))) (else ZEDerr))) (define (ZEDappend ZEDlist1 ZEDlist2) (cond ((ZEDnull? ZEDlist1) ZEDlist2) ((ZEDalways) (ZEDc (ZED1 ZEDlist1) (ZEDappend (ZED! ZEDlist1) ZEDlist2))) (else ZEDerr))) (define (ZEDappend-output-file ZEDoutput-file) (cond ((ZEDalways) (apply1 open-output-file (wrap ZEDoutput-file) #:exists 'append)) (else ZEDerr))) (define (ZEDbit ZEDgenerator) (cond ((ZEDalways) (ZED= 2 (ZEDrandom ZEDgenerator 2))) (else ZEDerr))) (define (ZEDbits ZEDruns) (cond ((ZEDalways) (ZEDreduce-append (ZEDZEDbits ZEDruns))) (else ZEDerr))) (define (ZEDZEDbits ZEDruns) (cond ((ZEDnull? ZEDruns) ZEDnil) ((ZEDalways) (ZEDc (ZEDappend (ZEDrepeat (ZEDsub1 (ZED1 ZEDruns)) #true) (ZEDwrap #false)) (ZEDZEDbits (ZED! ZEDruns)))) (else ZEDerr))) (define (ZEDbits->byte ZEDbits) (cond ((ZEDalways) (ZEDZEDbits->byte ZEDbits 0)) (else ZEDerr))) (define (ZEDZEDbits->byte ZEDbits ZEDaccumulator) (cond ((ZEDnull? ZEDbits) ZEDaccumulator) ((ZED1 ZEDbits) (ZEDZEDbits->byte (ZED! ZEDbits) (ZED+ 1 (ZED* 2 ZEDaccumulator)))) ((ZEDalways) (ZEDZEDbits->byte (ZED! ZEDbits) (ZED* 2 ZEDaccumulator))) (else ZEDerr))) (define (ZEDbits->bytes ZEDbits) (cond ((ZEDalways) (ZEDmp ZEDbits->byte (ZEDgroup8 ZEDbits))) (else ZEDerr))) (define (ZEDboolean? ZEDvalue) (cond ((ZEDalways) (apply boolean? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDbyte->bits ZEDbyte) (cond ((ZEDalways) (ZEDappend (ZEDrepeat (ZED- 8 (ZEDlength (ZEDZEDbyte->bits ZEDbyte))) #false) (ZEDreverse (ZEDZEDbyte->bits ZEDbyte)))) (else ZEDerr))) (define (ZEDZEDbyte->bits ZEDbyte) (cond ((ZEDzero? ZEDbyte) ZEDnil) ((ZEDodd? ZEDbyte) (ZEDc #true (ZEDZEDbyte->bits (ZED/ (ZED- ZEDbyte 1) 2)))) ((ZEDeven? ZEDbyte) (ZEDc #false (ZEDZEDbyte->bits (ZED/ ZEDbyte 2)))) (else ZEDerr))) (define (ZEDbytes->bits ZEDbytes) (cond ((ZEDalways) (ZEDreduce-append (ZEDmp ZEDbyte->bits ZEDbytes))) (else ZEDerr))) (define (ZEDbyte-string->path ZEDbyte-string) (cond ((ZEDalways) (apply bytes->path (wrap ZEDbyte-string))) (else ZEDerr))) (define (ZEDbyte-string-append ZEDbyte-string1 ZEDbyte-string2) (cond ((ZEDalways) (apply bytes-append (wrap2 ZEDbyte-string1 ZEDbyte-string2))) (else ZEDerr))) (define (ZEDcharacter? ZEDvalue) (cond ((ZEDalways) (apply char? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDcharacter->integer ZEDcharacter) (cond ((ZEDalways) (apply char->integer (wrap ZEDcharacter))) (else ZEDerr))) (define (ZEDcharacter->string ZEDcharacter) (cond ((ZEDalways) (apply list->string (wrap (wrap ZEDcharacter)))) (else ZEDerr))) (define (ZEDclose-input-port ZEDport) (cond ((ZEDalways) (apply close-input-port (wrap ZEDport))) (else ZEDerr))) (define (ZEDclose-output-port ZEDport) (cond ((ZEDalways) (apply close-output-port (wrap ZEDport))) (else ZEDerr))) (define (ZEDcollect-garbage) (cond ((ZEDalways) (apply collect-garbage ZEDnil)) (else ZEDerr))) (define (ZEDcount ZEDnumber) (cond ((ZEDalways) (ZEDc ZEDnumber (ZEDcount (ZEDadd1 ZEDnumber)))) (else ZEDerr))) (define (ZEDcurrent-memory-use) (cond ((ZEDalways) (apply current-memory-use ZEDnil)) (else ZEDerr))) (define (ZEDcurrent-random-number-generator) (cond ((ZEDalways) (apply current-pseudo-random-generator ZEDnil)) (else ZEDerr))) (define (ZEDdefault-input-port) (cond ((ZEDalways) (apply current-input-port ZEDnil)) (else ZEDerr))) (define (ZEDdefault-output-port) (cond ((ZEDalways) (apply current-output-port ZEDnil)) (else ZEDerr))) (define (ZEDdelete-file ZEDfile) (cond ((ZEDalways) (apply delete-file (wrap ZEDfile))) (else ZEDerr))) (define (ZEDdelete-file-if-exists ZEDfile) (cond ((ZEDfile-exists? ZEDfile) (ZEDdelete-file ZEDfile)) (else ZEDerr))) (define (ZEDdisplay ZEDport ZEDitem) (cond ((ZEDalways) (apply display (wrap2 ZEDitem ZEDport))) (else ZEDerr))) (define (ZEDdr ZEDvalue) (cond ((ZEDalways) (ZEDse (ZEDdisplay (ZEDdefault-output-port) (ZEDpr (ZEDZEDdr ZEDvalue))) (ZEDse (ZEDnewline (ZEDdefault-output-port)) (ZEDse (ZEDnewline (ZEDdefault-output-port)) ZEDvalue)))) (else ZEDerr))) (define (ZEDZEDdr ZEDvalue) (cond ((ZEDpair? ZEDvalue) (ZEDmp ZEDZEDdr (ZEDfirst 64 ZEDvalue))) ((ZEDalways) ZEDvalue) (else ZEDerr))) (define (ZEDdrr ZEDvalue) (cond ((ZEDalways) (ZEDse (ZEDdisplay (ZEDdefault-output-port) (ZEDpr ZEDvalue)) (ZEDse (ZEDnewline (ZEDdefault-output-port)) (ZEDse (ZEDnewline (ZEDdefault-output-port)) ZEDvalue)))) (else ZEDerr))) (define (ZEDend-of-file-object) (cond ((ZEDalways) eof) (else ZEDerr))) (define (ZEDend-of-file-object? ZEDvalue) (cond ((ZEDalways) (apply eof-object? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDeq? ZEDsymbol1 ZEDsymbol2) (cond ((ZEDalways) (apply eq? (wrap2 ZEDsymbol1 ZEDsymbol2))) (else ZEDerr))) (define (ZEDequal? ZEDlist1 ZEDlist2) (cond ((ZEDor (ZEDnull? ZEDlist1) (ZEDnull? ZEDlist2)) (ZEDand (ZEDnull? ZEDlist1) (ZEDnull? ZEDlist2))) ((ZEDnot (ZEDpair? ZEDlist1)) (ZED= ZEDlist1 ZEDlist2)) ((ZEDalways) (ZEDand (ZEDequal? (ZED1 ZEDlist1) (ZED1 ZEDlist2)) (ZEDequal? (ZED! ZEDlist1) (ZED! ZEDlist2)))) (else ZEDerr))) (define (ZEDeven? ZEDnumber) (cond ((ZEDalways) (apply even? (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDexact->inexact ZEDnumber) (cond ((ZEDalways) (apply exact->inexact (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDfi ZEDfunction ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDfunction (ZED1 ZEDlist)) (ZEDc (ZED1 ZEDlist) (ZEDfi ZEDfunction (ZED! ZEDlist)))) ((ZEDalways) (ZEDfi ZEDfunction (ZED! ZEDlist))) (else ZEDerr))) (define (ZEDfile-exists? ZEDfile) (cond ((ZEDalways) (apply file-exists? (wrap ZEDfile))) (else ZEDerr))) (define (ZEDfile-size ZEDfile) (cond ((ZEDalways) (apply file-size (wrap ZEDfile))) (else ZEDerr))) (define (ZEDfirst ZEDnumber ZEDlist) (cond ((ZEDnot (ZEDpair? ZEDlist)) ZEDlist) ((ZEDzero? ZEDnumber) ZEDnil) ((ZEDpositive? ZEDnumber) (ZEDc (ZED1 ZEDlist) (ZEDfirst (ZEDsub1 ZEDnumber) (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDgenerate-symbol ZEDbase) (cond ((ZEDalways) (apply gensym (wrap ZEDbase))) (else ZEDerr))) (define (ZEDget-file ZEDmessage) (cond ((ZEDalways) (apply get-file (wrap ZEDmessage))) (else ZEDerr))) (define (ZEDget-run ZEDbits) (cond ((ZED1 ZEDbits) (ZED+ 1 (ZEDget-run (ZED! ZEDbits)))) ((ZEDalways) 1) (else ZEDerr))) (define (ZEDget-text-from-user ZEDtitle ZEDmessage) (cond ((ZEDalways) (apply get-text-from-user (wrap2 ZEDtitle ZEDmessage))) (else ZEDerr))) (define (ZEDgr ZEDgarbage ZEDvalue) (cond ((ZEDalways) (ZEDse (ZEDdr ZEDgarbage) ZEDvalue)) (else ZEDerr))) (define (ZEDgroup8 ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDalways) (ZEDc (ZEDfirst 8 ZEDlist) (ZEDgroup8 (ZED-8 ZEDlist)))) (else ZEDerr))) (define (ZEDgrr ZEDgarbage ZEDvalue) (cond ((ZEDalways) (ZEDse (ZEDdrr ZEDgarbage) ZEDvalue)) (else ZEDerr))) (define (ZEDlast ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDerr) ((ZEDnull? (ZED! ZEDlist)) (ZED1 ZEDlist)) ((ZEDalways) (ZEDlast (ZED! ZEDlist))) (else ZEDerr))) (define (ZEDlength ZEDlist) (cond ((ZEDnull? ZEDlist) 0) ((ZEDalways) (ZEDadd1 (ZEDlength (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDlist? ZEDlist) (cond ((ZEDnull? ZEDlist) #true) ((ZEDpair? ZEDlist) (ZEDlist? (ZED! ZEDlist))) ((ZEDalways) #false) (else ZEDerr))) (define (ZEDlist->racket ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDalways) (cons (ZED1 ZEDlist) (ZEDlist->racket (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDlist->string ZEDlist) (cond ((ZEDalways) (apply string-append (apply flatten (wrap (ZEDZEDlist->string ZEDlist))))) (else ZEDerr))) (define (ZEDZEDlist->string ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDnot (ZEDpair? ZEDlist)) (ZEDZEDlist->string (ZEDwrap2 "," ZEDlist))) ((ZEDnull? (ZED1 ZEDlist)) (ZEDZEDlist->string (ZED! ZEDlist))) ((ZEDpair? (ZED1 ZEDlist)) (cons (ZEDZEDlist->string (ZED1 ZEDlist)) (ZEDZEDlist->string (ZED! ZEDlist)))) ((ZEDalways) (cons (apply call-with-output-string (wrap (apply (apply curry (wrap curry)) (wrap2 display (ZED1 ZEDlist))))) (ZEDZEDlist->string (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDlist->ZED ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDalways) (ZEDc (car ZEDlist) (ZEDlist->ZED (cdr ZEDlist)))) (else ZEDerr))) (define (ZEDmake-random-number-generator) (cond ((ZEDalways) (apply make-pseudo-random-generator ZEDnil)) (else ZEDerr))) (define (ZEDmany ZEDfunction ZEDcount ZEDvalue) (cond ((ZED< ZEDcount 1) ZEDvalue) ((ZEDalways) (ZEDmany ZEDfunction (ZEDsub1 ZEDcount) (ZEDfunction ZEDvalue))) (else ZEDerr))) (define (ZEDmaximum ZEDnumber1 ZEDnumber2) (cond ((ZEDalways) (apply max (wrap2 ZEDnumber1 ZEDnumber2))) (else ZEDerr))) (define (ZEDmember? ZEDvalue ZEDlist) (cond ((ZEDnull? ZEDlist) #false) ((ZED= ZEDvalue (ZED1 ZEDlist)) #true) ((ZEDalways) (ZEDmember? ZEDvalue (ZED! ZEDlist))) (else ZEDerr))) (define (ZEDmessage ZEDlist) (cond ((ZEDalways) (ZEDlist->string (ZEDadd-between #\space ZEDlist))) (else ZEDerr))) (define (ZEDmessage-box ZEDtitle ZEDmessage) (cond ((ZEDalways) (apply message-box (wrap2 ZEDtitle ZEDmessage))) (else ZEDerr))) (define (ZEDmodulo ZEDlarge ZEDsmall) (cond ((ZEDalways) (apply modulo (wrap2 ZEDlarge ZEDsmall))) (else ZEDerr))) (define (ZEDmp ZEDfunction ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDpair? ZEDlist) (ZEDc (ZEDfunction (ZED1 ZEDlist)) (ZEDmp ZEDfunction (ZED! ZEDlist)))) ((ZEDalways) (ZEDfunction ZEDlist)) (else ZEDerr))) (define (ZEDmultiple? ZEDsmall ZEDlarge) (cond ((ZEDalways) (ZED= 0 (ZEDmodulo ZEDlarge ZEDsmall))) (else ZEDerr))) (define (ZEDnegative? ZEDnumber) (cond ((ZEDalways) (ZED< ZEDnumber 0)) (else ZEDerr))) (define (ZEDnewline ZEDport) (cond ((ZEDalways) (apply newline (wrap ZEDport))) (else ZEDerr))) (define (ZEDnon ZEDruns) (cond ((ZED= 1 (ZED1 ZEDruns)) (ZEDnon (ZED! ZEDruns))) ((ZEDalways) (ZED1 ZEDruns)) (else ZEDerr))) (define (ZEDnot ZEDboolean) (cond ((ZEDalways) (apply not (wrap ZEDboolean))) (else ZEDerr))) (define (ZEDnull? ZEDlist) (cond ((ZEDalways) (apply null? (wrap ZEDlist))) (else ZEDerr))) (define (ZEDnumber? ZEDvalue) (cond ((ZEDalways) (apply number? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDnumber->string ZEDnumber) (cond ((ZEDalways) (apply number->string (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDodd? ZEDnumber) (cond ((ZEDalways) (apply odd? (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDones ZEDruns) (cond ((ZED= 1 (ZED1 ZEDruns)) (ZEDadd1 (ZEDones (ZED! ZEDruns)))) ((ZEDalways) 0) (else ZEDerr))) (define (ZEDopen-input-file ZEDpath) (cond ((ZEDalways) (apply open-input-file (wrap ZEDpath))) (else ZEDerr))) (define (ZEDopen-output-file ZEDpath) (cond ((ZEDalways) (apply open-output-file (wrap ZEDpath))) (else ZEDerr))) (define (ZEDpair? ZEDvalue) (cond ((ZEDalways) (apply pair? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDpath->byte-string ZEDpath) (cond ((ZEDalways) (apply path->bytes (wrap ZEDpath))) (else ZEDerr))) (define (ZEDpositive? ZEDnumber) (cond ((ZEDalways) (ZED> ZEDnumber 0)) (else ZEDerr))) (define (ZEDpr ZEDlist) (cond ((ZEDalways) (ZEDlist->string (ZEDZEDpr ZEDlist))) (else ZEDerr))) (define (ZEDZEDpr ZEDlist) (cond ((ZEDlist? ZEDlist) (ZEDappend (ZEDappend (ZEDwrap #\[) (ZEDadd-between #\space (ZEDmp ZEDZEDpr ZEDlist))) (ZEDwrap #\]))) ((ZEDalways) ZEDlist) (else ZEDerr))) (define (ZEDpredictable-random-bits ZEDseed) (cond ((ZEDalways) (ZEDse (ZEDrandom-seed ZEDseed) (ZEDZEDpredictable-random-bits (ZEDcurrent-random-number-generator)))) (else ZEDerr))) (define (ZEDZEDpredictable-random-bits ZEDgenerator) (cond ((ZEDalways) (ZEDc (ZEDbit ZEDgenerator) (ZEDZEDpredictable-random-bits ZEDgenerator))) (else ZEDerr))) (define (ZEDrandom-number-generator->vector ZEDgenerator) (cond ((ZEDalways) (apply pseudo-random-generator->vector (wrap ZEDgenerator))) (else ZEDerr))) (define (ZEDrandom-number-generator? ZEDvalue) (cond ((ZEDalways) (apply pseudo-random-generator? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDput-file ZEDmessage) (cond ((ZEDalways) (apply put-file (wrap ZEDmessage))) (else ZEDerr))) (define (ZEDquotient ZEDnumerator ZEDdenominator) (cond ((ZEDalways) (apply quotient (wrap2 ZEDnumerator ZEDdenominator))) (else ZEDerr))) (define (ZEDrandom ZEDgenerator ZEDrange) (cond ((ZEDalways) (ZEDadd1 (apply random (wrap2 ZEDrange ZEDgenerator)))) (else ZEDerr))) (define (ZEDrandom-number-generator-vector? ZEDvalue) (cond ((ZEDalways) (apply pseudo-random-generator-vector? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDrandom-seed ZEDnumber) (cond ((ZEDalways) (apply random-seed (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDread ZEDport) (cond ((ZEDalways) (apply read (wrap ZEDport))) (else ZEDerr))) (define (ZEDread-byte ZEDport) (cond ((ZEDalways) (apply read-byte (wrap ZEDport))) (else ZEDerr))) (define (ZEDread-bytes ZEDpath) (cond ((ZEDalways) (ZEDZEDread-bytes (ZEDopen-input-file ZEDpath))) (else ZEDerr))) (define (ZEDZEDread-bytes ZEDport) (cond ((ZEDalways) (ZEDZEDread-bytes1 ZEDport (ZEDread-byte ZEDport))) (else ZEDerr))) (define (ZEDZEDread-bytes1 ZEDport ZEDbyte) (cond ((ZEDend-of-file-object? ZEDbyte) (ZEDse (ZEDclose-input-port ZEDport) ZEDnil)) ((ZEDalways) (ZEDc ZEDbyte (ZEDZEDread-bytes ZEDport))) (else ZEDerr))) (define (ZEDreduce ZEDfinal ZEDfunction ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDfinal) ((ZEDalways) (ZEDZEDreduce ZEDfinal ZEDfunction (ZED! ZEDlist) (ZED1 ZEDlist))) (else ZEDerr))) (define (ZEDZEDreduce ZEDfinal ZEDfunction ZEDlist ZEDaccumulator) (cond ((ZEDnull? ZEDlist) (ZEDfunction ZEDaccumulator ZEDfinal)) ((ZEDalways) (ZEDZEDreduce ZEDfinal ZEDfunction (ZED! ZEDlist) (ZEDfunction ZEDaccumulator (ZED1 ZEDlist)))) (else ZEDerr))) (define (ZEDreduce-append ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZEDnull? (ZED1 ZEDlist)) (ZEDreduce-append (ZED! ZEDlist))) ((ZEDalways) (ZEDZEDreduce-append (ZED1 ZEDlist) (ZED! ZEDlist))) (else ZEDerr))) (define (ZEDZEDreduce-append ZEDlist1 ZEDlist2) (cond ((ZEDnull? ZEDlist1) (ZEDreduce-append ZEDlist2)) ((ZEDalways) (ZEDc (ZED1 ZEDlist1) (ZEDZEDreduce-append (ZED! ZEDlist1) ZEDlist2))) (else ZEDerr))) (define (ZEDref ZEDnumber ZEDlist) (cond ((ZED= ZEDnumber 1) (ZED1 ZEDlist)) ((ZED> ZEDnumber 1) (ZEDref (ZEDsub1 ZEDnumber) (ZED! ZEDlist))) (else ZEDerr))) (define (ZEDremove ZEDvalue ZEDlist) (cond ((ZEDnull? ZEDlist) ZEDnil) ((ZED= ZEDvalue (ZED1 ZEDlist)) (ZED! ZEDlist)) ((ZEDalways) (ZEDc (ZED1 ZEDlist) (ZEDremove ZEDvalue (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDremove-with-equal ZEDvalue ZEDlist) (cond ((ZEDequal? ZEDvalue (ZED1 ZEDlist)) (ZED! ZEDlist)) ((ZEDalways) (ZEDc (ZED1 ZEDlist) (ZEDremove-with-equal ZEDvalue (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDrepeat ZEDnumber ZEDitem) (cond ((ZEDzero? ZEDnumber) ZEDnil) ((ZEDpositive? ZEDnumber) (ZEDc ZEDitem (ZEDrepeat (ZEDsub1 ZEDnumber) ZEDitem))) (else ZEDerr))) (define (ZEDreplace-output-file ZEDoutput-file) (cond ((ZEDalways) (apply1 open-output-file (wrap ZEDoutput-file) #:exists 'replace)) (else ZEDerr))) (define (ZEDreverse ZEDlist) (cond ((ZEDalways) (ZEDZEDreverse ZEDlist ZEDnil)) (else ZEDerr))) (define (ZEDZEDreverse ZEDlist ZEDreverse) (cond ((ZEDnull? ZEDlist) ZEDreverse) ((ZEDalways) (ZEDZEDreverse (ZED! ZEDlist) (ZEDc (ZED1 ZEDlist) ZEDreverse))) (else ZEDerr))) (define (ZEDruns ZEDbits) (cond ((ZEDnull? ZEDbits) ZEDnil) ((ZEDalways) (ZEDc (ZEDget-run ZEDbits) (ZEDruns (ZEDtails (ZEDget-run ZEDbits) ZEDbits)))) (else ZEDerr))) (define (ZEDsort ZEDless-than? ZEDlist) (cond ((ZEDalways) (ZEDlist->ZED (apply sort (wrap2 (ZEDlist->racket ZEDlist) ZEDless-than?)))) (else ZEDerr))) (define (ZEDspace ZEDport) (cond ((ZEDalways) (ZEDdisplay ZEDport #\space)) (else ZEDerr))) (define (ZEDstring? ZEDvalue) (cond ((ZEDalways) (apply string? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDstring->list ZEDstring) (cond ((ZEDalways) (ZEDlist->ZED (apply string->list (wrap ZEDstring)))) (else ZEDerr))) (define (ZEDsub1 ZEDnumber) (cond ((ZEDalways) (apply sub1 (wrap ZEDnumber))) (else ZEDerr))) (define (ZEDsum ZEDnumbers) (cond ((ZEDalways) (ZEDZEDsum ZEDnumbers 0)) (else ZEDerr))) (define (ZEDZEDsum ZEDnumbers ZEDaccumulator) (cond ((ZEDnull? ZEDnumbers) ZEDaccumulator) ((ZEDalways) (ZEDZEDsum (ZED! ZEDnumbers) (ZED+ ZEDaccumulator (ZED1 ZEDnumbers)))) (else ZEDerr))) (define (ZEDsymbol? ZEDvalue) (cond ((ZEDalways) (apply symbol? (wrap ZEDvalue))) (else ZEDerr))) (define (ZEDsymbol->string ZEDsymbol) (cond ((ZEDalways) (apply symbol->string (wrap ZEDsymbol))) (else ZEDerr))) (define (ZEDtails ZEDnumber ZEDlist) (cond ((ZEDor (ZEDnull? ZEDlist) (ZED= ZEDnumber 0)) ZEDlist) ((ZED> ZEDnumber 0) (ZEDtails (ZEDsub1 ZEDnumber) (ZED! ZEDlist))) (else ZEDerr))) (define (ZEDvector->random-number-generator ZEDvector) (cond ((ZEDalways) (apply vector->pseudo-random-generator (wrap ZEDvector))) (else ZEDerr))) (define (ZEDwrap ZEDa) (cond ((ZEDalways) (ZEDc ZEDa ZEDnil)) (else ZEDerr))) (define (ZEDwrap2 ZEDa ZEDb) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap ZEDb))) (else ZEDerr))) (define (ZEDwrap3 ZEDa ZEDb ZEDd) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap2 ZEDb ZEDd))) (else ZEDerr))) (define (ZEDwrap4 ZEDa ZEDb ZEDd ZEDe) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap3 ZEDb ZEDd ZEDe))) (else ZEDerr))) (define (ZEDwrap5 ZEDa ZEDb ZEDd ZEDe ZEDf) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap4 ZEDb ZEDd ZEDe ZEDf))) (else ZEDerr))) (define (ZEDwrap6 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap5 ZEDb ZEDd ZEDe ZEDf ZEDg))) (else ZEDerr))) (define (ZEDwrap7 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap6 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh))) (else ZEDerr))) (define (ZEDwrap8 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap7 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi))) (else ZEDerr))) (define (ZEDwrap9 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap8 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj))) (else ZEDerr))) (define (ZEDwrap10 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap9 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk))) (else ZEDerr))) (define (ZEDwrap11 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap10 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl))) (else ZEDerr))) (define (ZEDwrap12 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap11 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm))) (else ZEDerr))) (define (ZEDwrap13 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap12 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn))) (else ZEDerr))) (define (ZEDwrap14 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn ZEDo) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap13 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn ZEDo))) (else ZEDerr))) (define (ZEDwrap15 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn ZEDo ZEDp) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap14 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn ZEDo ZEDp))) (else ZEDerr))) (define (ZEDwrap16 ZEDa ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn ZEDo ZEDp ZEDq) (cond ((ZEDalways) (ZEDc ZEDa (ZEDwrap15 ZEDb ZEDd ZEDe ZEDf ZEDg ZEDh ZEDi ZEDj ZEDk ZEDl ZEDm ZEDn ZEDo ZEDp ZEDq))) (else ZEDerr))) (define (ZEDwrite-byte ZEDport ZEDbyte) (cond ((ZEDalways) (apply write-byte (wrap2 ZEDbyte ZEDport))) (else ZEDerr))) (define (ZEDwrite-bytes ZEDpath ZEDlist) (cond ((ZEDalways) (ZEDZEDwrite-bytes (ZEDopen-output-file ZEDpath) ZEDlist)) (else ZEDerr))) (define (ZEDZEDwrite-bytes ZEDport ZEDlist) (cond ((ZEDnull? ZEDlist) (ZEDclose-output-port ZEDport)) ((ZEDalways) (ZEDse (ZEDwrite-byte ZEDport (ZED1 ZEDlist)) (ZEDZEDwrite-bytes ZEDport (ZED! ZEDlist)))) (else ZEDerr))) (define (ZEDxor ZEDbit1 ZEDbit2) (cond ((ZEDand (ZEDboolean? ZEDbit1) (ZEDboolean? ZEDbit2)) (ZEDnot (ZED= ZEDbit1 ZEDbit2))) (else ZEDerr))) (define (ZEDzero? ZEDnumber) (cond ((ZEDalways) (ZED= ZEDnumber 0)) (else ZEDerr))) (define (ZEDzip ZEDbits1 ZEDbits2) (cond ((ZEDor (ZEDnull? ZEDbits1) (ZEDnull? ZEDbits2)) ZEDnil) ((ZEDalways) (ZEDc (ZEDxor (ZED1 ZEDbits1) (ZED1 ZEDbits2)) (ZEDzip (ZED! ZEDbits1) (ZED! ZEDbits2)))) (else ZEDerr))) (define (my-flatten tree) (cond ((not (pair? tree)) tree) ((null? (car tree)) (my-flatten (cdr tree))) ((pair? (car tree)) (append (my-flatten (car tree)) (my-flatten (cdr tree)))) ((not (pair? (car tree))) (cons (car tree) (my-flatten (cdr tree)))) (else ZEDerr))) (define (my-remove number list) (cond ((null? list) ZEDnil) ((= number 0) list) ((> number 0) (my-remove (- number 1) (cdr list))) (else ZEDerr))) (define (string->ZED string) (cond ((ZEDalways) (string->symbol (list->string (append (wrap3 #\Z #\E #\D) (my-flatten (map symbol-character (string->list string))))))) (else ZEDerr))) (define (symbol-character character) (cond ((ZED= character #\nul) (wrap2 #\@ #\!)) ((ZED= character #\u1) (wrap2 #\@ #\$)) ((ZED= character #\u2) (wrap2 #\@ #\%)) ((ZED= character #\u3) (wrap2 #\@ #\&)) ((ZED= character #\u4) (wrap2 #\@ #\*)) ((ZED= character #\u5) (wrap2 #\@ #\+)) ((ZED= character #\u6) (wrap2 #\@ #\-)) ((ZED= character #\u7) (wrap2 #\@ #\.)) ((ZED= character #\backspace) (wrap2 #\@ #\/)) ((ZED= character #\tab) (wrap2 #\@ #\:)) ((ZED= character #\newline) (wrap2 #\@ #\<)) ((ZED= character #\vtab) (wrap2 #\@ #\=)) ((ZED= character #\page) (wrap2 #\@ #\>)) ((ZED= character #\return) (wrap2 #\@ #\?)) ((ZED= character #\uE) (wrap2 #\@ #\A)) ((ZED= character #\uF) (wrap2 #\@ #\B)) ((ZED= character #\u10) (wrap2 #\@ #\C)) ((ZED= character #\u11) (wrap2 #\@ #\D)) ((ZED= character #\u12) (wrap2 #\@ #\E)) ((ZED= character #\u13) (wrap2 #\@ #\F)) ((ZED= character #\u14) (wrap2 #\@ #\G)) ((ZED= character #\u15) (wrap2 #\@ #\H)) ((ZED= character #\u16) (wrap2 #\@ #\I)) ((ZED= character #\u17) (wrap2 #\@ #\J)) ((ZED= character #\u18) (wrap2 #\@ #\K)) ((ZED= character #\u19) (wrap2 #\@ #\L)) ((ZED= character #\u1A) (wrap2 #\@ #\M)) ((ZED= character #\u1B) (wrap2 #\@ #\N)) ((ZED= character #\u1C) (wrap2 #\@ #\O)) ((ZED= character #\u1D) (wrap2 #\@ #\P)) ((ZED= character #\u1E) (wrap2 #\@ #\Q)) ((ZED= character #\u1F) (wrap2 #\@ #\R)) ((ZED= character #\space) (wrap2 #\@ #\S)) ((ZED= character #\@) (wrap2 #\@ #\@)) ((ZED= character #\") (wrap2 #\@ #\T)) ((ZED= character #\') (wrap2 #\@ #\U)) ((ZED= character #\() (wrap2 #\@ #\V)) ((ZED= character #\)) (wrap2 #\@ #\W)) ((ZED= character #\,) (wrap2 #\@ #\X)) ((ZED= character #\;) (wrap2 #\@ #\Y)) ((ZED= character #\[) (wrap2 #\@ #\Z)) ((ZED= character #\\) (wrap2 #\@ #\^)) ((ZED= character #\]) (wrap2 #\@ #\_)) ((ZED= character #\`) (wrap2 #\@ #\a)) ((ZED= character #\{) (wrap2 #\@ #\b)) ((ZED= character #\|) (wrap2 #\@ #\c)) ((ZED= character #\}) (wrap2 #\@ #\d)) ((ZED= character #\rubout) (wrap2 #\@ #\e)) ((not (char-graphic? character)) (wrap2 #\@ #\f)) ((char-graphic? character) character) (else ZEDerr))) (define (clause-name clause) (cond ((ZEDalways) (car clause)) (else ZEDerr))) (define (clause-arguments clause) (cond ((ZEDalways) (cadr clause)) (else ZEDerr))) (define (clause-arity clause) (cond ((ZEDalways) (length (clause-arguments clause))) (else ZEDerr))) (define (clause-body clause) (cond ((ZEDalways) (cddr clause)) (else ZEDerr))) (define (clause-name-agree a b) (cond ((eq? (clause-name a) (clause-name b)) (clause-name a)) (else ZEDerr))) (define (clause-arguments-agree a b) (cond ((equal? (clause-arguments a) (clause-arguments b)) (clause-arguments a)) (else ZEDerr))) (define (combine-clauses a b) (cond ((ZEDalways) (cons (clause-name-agree a b) (cons (clause-arguments-agree a b) (append (clause-body a) (clause-body b))))) (else ZEDerr))) (define (combine-head-clauses program) (cond ((ZEDalways) (cons (combine-clauses (car program) (cadr program)) (cddr program))) (else ZEDerr))) (define (ready-clause clause) (cond ((ZEDalways) (cons (caaar clause) (cons (cdar clause) (cdr clause)))) (else ZEDerr))) (define (ready-program program) (cond ((ZEDalways) (map ready-clause program)) (else ZEDerr))) (define (combine-all program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((ZED= (clause-name (car program)) (clause-name (cadr program))) (combine-all (combine-head-clauses program))) ((not (ZED= (clause-name (car program)) (clause-name (cadr program)))) (cons (car program) (combine-all (cdr program)))) (else ZEDerr))) (define (combine-program-clauses program) (cond ((ZEDalways) (combine-all (ready-program program))) (else ZEDerr))) (define (arity-hash1 clause) (cond ((ZEDalways) (cons (clause-name clause) (clause-arity clause))) (else ZEDerr))) (define (arity-hash program) (cond ((ZEDalways) (make-hasheq (append (map arity-hash1 program) (append (wrap16 (cons 'wrap 1) (cons 'wrap2 2) (cons 'wrap3 3) (cons 'wrap4 4) (cons 'wrap5 5) (cons 'wrap6 6) (cons 'wrap7 7) (cons 'wrap8 8) (cons 'wrap9 9) (cons 'wrap10 10) (cons 'wrap11 11) (cons 'wrap12 12) (cons 'wrap13 13) (cons 'wrap14 14) (cons 'wrap15 15) (cons 'wrap16 16)) (append (wrap16 (cons 'and 2) (cons 'append 2) (cons 'assoc 2) (cons 'begin 2) (cons 'boolean? 1) (cons 'caaar 1) (cons 'cadr 1) (cons 'caddr 1) (cons 'cadddr 1) (cons 'car 1) (cons 'cdar 1) (cons 'cddddr 1) (cons 'cddr 1) (cons 'cdr 1) (cons 'char? 1) (cons 'char-numeric? 1)) (append (wrap16 (cons 'char-graphic? 1) (cons 'close-input-port 1) (cons 'close-output-port 1) (cons 'cons 2) (cons 'define 2) (cons 'delete-file 1) (cons 'display 2) (cons 'eq? 2) (cons 'equal? 2) (cons 'eof-object? 1) (cons 'exact? 1) (cons 'file-exists? 1) (cons 'inexact? 1) (cons 'length 1) (cons 'list->string 1) (cons 'map 2)) (append (wrap16 (cons 'not 1) (cons 'null? 1) (cons 'number? 1) (cons 'newline 1) (cons 'number->string 1) (cons 'or 2) (cons 'open-input-file 1) (cons 'open-output-file 1) (cons 'pair? 1) (cons 'quote 1) (cons 'reverse 1) (cons 'read-char 1) (cons 'symbol? 1) (cons 'string? 1) (cons 'string-append 2) (cons 'string->symbol 1)) (append (wrap16 (cons 'symbol->string 1) (cons 'string->list 1) (cons 'string->number 1) (cons '= 2) (cons '< 2) (cons '> 2) (cons '- 2) (cons '+ 2) (cons '* 2) (cons '/ 2) (cons 'ZED1 1) (cons 'ZED! 1) (cons 'ZEDc 2) (cons 'ZEDone 2) (cons 'ZEDtwo 3) (cons 'ZEDthree 4)) (append (wrap16 (cons 'ZEDfour 5) (cons 'ZEDfive 6) (cons 'ZEDsix 7) (cons 'ZEDseven 8) (cons 'ZEDeight 9) (cons 'ZEDnine 10) (cons 'ZEDten 11) (cons 'force 1) (cons 'ZED= 2) (cons 'caar 1) (cons 'cdddr 1) (cons 'list 0) (cons 'ZEDalways 0) (cons 'apply 2) (cons 'ZEDse 2) (cons 'ZEDand 2)) (append (wrap16 (cons 'ZEDor 2) (cons 'ZEDeleven 12) (cons 'ZEDtwelve 13) (cons 'ZEDthirteen 14) (cons 'ZEDfourteen 15) (cons 'ZEDfifteen 16) (cons 'ZEDsixteen 17) (cons 'ZEDseventeen 18) (cons 'ZEDeighteen 19) (cons 'ZEDnineteen 20) (cons 'ZEDtwenty 21) (cons 'ZEDtwenty-one 22) (cons 'ZEDtwenty-two 23) (cons 'ZEDtwenty-three 24) (cons 'ZEDtwenty-four 25) (cons 'ZEDtwenty-five 26)) (append (wrap16 (cons 'ZEDtwenty-six 27) (cons 'ZEDtwenty-seven 28) (cons 'ZEDtwenty-eight 29) (cons 'ZEDtwenty-nine 30) (cons 'ZEDthirty 31) (cons 'ZEDthirty-one 32) (cons 'ZEDthirty-two 33) (cons 'get-file 0) (cons 'make-hasheq 1) (cons 'hash-ref 2) (cons 'apply1 4) (cons 'apply2 6) (cons 'apply3 8) (cons 'apply4 10) (cons 'apply5 12) (cons 'filter 2)) (wrap4 (cons 'ZEDzero 1) (cons 'foldr 3) (cons 'function-hack-2 2) (cons 'write-char 2))))))))))))) (else ZEDerr))) (define (arity function arity-hash) (cond ((ZEDalways) (hash-ref arity-hash function)) (else ZEDerr))) (define (primitives) (cond ((ZEDalways) (append (wrap16 'begin (quote (define wrap list)) (quote (define wrap2 list)) (quote (define wrap3 list)) (quote (define wrap4 list)) (quote (define wrap5 list)) (quote (define wrap6 list)) (quote (define wrap7 list)) (quote (define wrap8 list)) (quote (define wrap9 list)) (quote (define wrap10 list)) (quote (define wrap11 list)) (quote (define wrap12 list)) (quote (define wrap13 list)) (quote (define wrap14 list)) (quote (define wrap15 list))) (wrap16 (quote (define wrap16 list)) (wrap3 'define-syntax 'ZEDand (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'and 'a 'b)))) (wrap3 'define-syntax 'ZEDor (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'or 'a 'b)))) (wrap3 'define-syntax 'ZEDse (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'begin 'a 'b)))) (wrap3 'define-syntax 'ZEDc (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'cons (wrap2 'delay 'a) (wrap2 'delay 'b))))) (quote (define (ZED1 pair) (force (car pair)))) (quote (define (ZED! pair) (force (cdr pair)))) (quote (define ZED= eqv?)) (quote (define ZEDerr 'err)) (wrap3 'define 'ZEDnil (wrap2 'quote ZEDnil)) (quote (define (ZEDalways) #true)) (wrap3 'define-syntax 'apply1 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap5 '_ 'a 'b 'c 'd) (wrap5 'apply 'a 'b 'c 'd)))) (wrap3 'define-syntax 'apply2 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap7 '_ 'a 'b 'c 'd 'e 'f) (wrap7 'apply 'a 'b 'c 'd 'e 'f)))) (wrap3 'define-syntax 'apply3 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap9 '_ 'a 'b 'c 'd 'e 'f 'g 'h) (wrap9 'apply 'a 'b 'c 'd 'e 'f 'g 'h)))) (wrap3 'define-syntax 'apply4 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap11 '_ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j) (wrap11 'apply 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j)))) (wrap3 'define-syntax 'apply5 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap13 '_ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l) (wrap13 'apply 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l))))))) (else ZEDerr))) (define (application? expression) (cond ((ZEDalways) (and (not (null? expression)) (pair? (car expression)))) (else ZEDerr))) (define (function expression) (cond ((ZEDalways) (caar expression)) (else ZEDerr))) (define (double-application? expression) (cond ((null? expression) #false) ((null? (cdr expression)) #false) ((not (null? (cdr expression))) (and (pair? (car expression)) (pair? (cadr expression)))) (else ZEDerr))) (define (schemefy1 expression arity-hash) (cond ((not (application? expression)) (car expression)) ((ZED= 0 (arity (function expression) arity-hash)) (car expression)) ((double-application? expression) (cons (function expression) (cons (schemefy1 (cdr expression) arity-hash) (gather (- (arity (function expression) arity-hash) 1) (my-remove (+ 1 (length (my-flatten (schemefy1 (cdr expression) arity-hash)))) expression) arity-hash)))) ((application? expression) (cons (function expression) (gather (arity (function expression) arity-hash) (cdr expression) arity-hash))) (else ZEDerr))) (define (schemefy expression arity-hash) (cond ((ZEDalways) (wrap (schemefy1 expression arity-hash))) (else ZEDerr))) (define (gather how-many expression arity-hash) (cond ((= how-many 0) ZEDnil) ((application? expression) (append (schemefy expression arity-hash) (gather (- how-many 1) (my-remove (length (my-flatten (schemefy expression arity-hash))) expression) arity-hash))) ((not (application? expression)) (cons (car expression) (gather (- how-many 1) (cdr expression) arity-hash))) (else ZEDerr))) (define (map-with function-hack-2 list extra) (cond ((null? list) ZEDnil) ((not (null? list)) (cons (function-hack-2 (car list) extra) (map-with function-hack-2 (cdr list) extra))) (else ZEDerr))) (define (functionize function arity-hash) (cond ((ZEDalways) (wrap3 'define (cons (car function) (cadr function)) (cons 'cond (append (condefy (map-with schemefy (cddr function) arity-hash)) (wrap (wrap2 'else 'ZEDerr)))))) (else ZEDerr))) (define (condefy clauses) (cond ((null? clauses) ZEDnil) ((not (null? clauses)) (cons (append (car clauses) (cadr clauses)) (condefy (cddr clauses)))) (else ZEDerr))) (define (programize program arity-hash) (cond ((ZEDalways) (cons 'begin (map-with functionize program arity-hash))) (else ZEDerr))) (define (namefy expression) (cond ((null? expression) ZEDnil) ((pair? expression) (wrap (symbolize (car expression)))) ((not (pair? expression)) (flexify expression)) (else ZEDerr))) (define (symbolize expression) (cond ((symbol? expression) (string->ZED (symbol->string expression))) ((string? expression) (string->symbol expression)) ((number? expression) (string->ZED (number->string expression))) (else ZEDerr))) (define (flexify expression) (cond ((symbol? expression) (flexify1 (string->list (symbol->string expression)))) ((string? expression) (string->symbol expression)) ((boolean? expression) expression) ((char? expression) expression) ((exact? expression) expression) ((inexact? expression) (string->number (string-append "#e" (number->string expression)))) (else ZEDerr))) (define (flexify1 list) (cond ((and (ZED= #\# (car list)) (and (ZED= #\0 (cadr list)) (not (null? (cddr list))))) (string->symbol (list->string (append (wrap3 #\# #\\ #\u) (cddr list))))) ((or (equal? list (wrap5 #\# #\t #\r #\u #\e)) (equal? list (wrap6 #\# #\f #\a #\l #\s #\e))) (string->symbol (list->string list))) ((ZED= (car list) #\#) (string->symbol (list->string (append (wrap2 #\# #\\) (cdr list))))) ((not (ZED= (car list) #\#)) (string->ZED (list->string list))) (else ZEDerr))) (define (read-all! port) (cond ((ZEDalways) (read-all1 port (read-char port))) (else ZEDerr))) (define (read-all1 port character) (cond ((eof-object? character) (begin (close-input-port port) ZEDnil)) ((not (eof-object? character)) (cons character (read-all! port))) (else ZEDerr))) (define (newline-space1 program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\newline (car program)) (or (ZED= #\space (cadr program)) (ZED= #\tab (cadr program)))) (newline-space1 (cdr program))) ((ZED= #\newline (car program)) (cons #\newline (newline-space1 (cdr program)))) ((not (ZED= #\newline (car program))) (cons (car program) (newline-space1 (cdr program)))) (else ZEDerr))) (define (again program) (cond ((ZEDalways) (again1 program (newline-space1 program))) (else ZEDerr))) (define (again1 program newline-space1) (cond ((equal? program newline-space1) program) ((not (equal? program newline-space1)) (again newline-space1)) (else ZEDerr))) (define (newline-space program) (cond ((ZEDalways) (append (again program) (wrap #\newline))) (else ZEDerr))) (define (repeats program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\newline (car program)) (ZED= #\newline (cadr program))) (repeats (cdr program))) ((and (or (ZED= #\space (car program)) (ZED= #\tab (car program))) (or (ZED= #\space (cadr program)) (ZED= #\tab (cadr program)))) (repeats (cdr program))) ((ZEDalways) (cons (car program) (repeats (cdr program)))) (else ZEDerr))) (define (space-tab program) (cond ((null? program) ZEDnil) ((ZED= #\tab (car program)) (cons #\space (space-tab (cdr program)))) ((ZEDalways) (cons (car program) (space-tab (cdr program)))) (else ZEDerr))) (define (space-newline program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\space (car program)) (ZED= #\newline (cadr program))) (space-newline (cdr program))) ((ZEDalways) (cons (car program) (space-newline (cdr program)))) (else ZEDerr))) (define (leading program) (cond ((null? program) ZEDnil) ((ZED= #\newline (car program)) (cdr program)) ((ZEDalways) program) (else ZEDerr))) (define (sentences program) (cond ((ZEDalways) (sentences1 program ZEDnil)) (else ZEDerr))) (define (sentences1 program accumulator) (cond ((null? program) ZEDnil) ((ZED= #\newline (car program)) (cons (reverse accumulator) (sentences1 (cdr program) ZEDnil))) ((ZEDalways) (sentences1 (cdr program) (cons (car program) accumulator))) (else ZEDerr))) (define (discard program) (cond ((null? program) ZEDnil) ((ZEDalways) (cons (car program) (cons (caddr program) (cons (cadddr program) (discard (cddddr program)))))) (else ZEDerr))) (define (read-sentence sentence) (cond ((null? sentence) ZEDnil) ((ZED= #\space (car sentence)) (read-sentence (cdr sentence))) ((ZED= #\( (car sentence)) (cons (namefy (wrap (verb (gather-verb (cdr sentence))))) (read-sentence (my-remove (+ 2 (length (gather-verb (cdr sentence)))) sentence)))) ((ZEDalways) (cons (noun (list->string (gather-noun sentence))) (read-sentence (my-remove (length (gather-noun sentence)) sentence)))) (else ZEDerr))) (define (verb gather-verb) (cond ((and (not (null? (cdr gather-verb))) (and (ZED= #\" (car gather-verb)) (ZED= #\" (car (reverse gather-verb))))) (list->string (cdr (reverse (cdr (reverse gather-verb)))))) ((ZEDalways) (string->symbol (list->string gather-verb))) (else ZEDerr))) (define (noun string) (cond ((ZEDalways) (noun-number string (string->number string))) (else ZEDerr))) (define (noun-number noun number) (cond ((ZEDalways) (namefy (noun-number1 noun number))) (else ZEDerr))) (define (noun-number1 noun number) (cond (number number) ((and (ZED= #\" (car (string->list noun))) (ZED= #\" (car (reverse (string->list noun))))) (list->string (cdr (reverse (cdr (reverse (string->list noun))))))) ((ZEDalways) (string->symbol noun)) (else ZEDerr))) (define (read-sentences sentences) (cond ((ZEDalways) (map read-sentence sentences)) (else ZEDerr))) (define (gather-verb sentence) (cond ((ZED= #\) (car sentence)) ZEDnil) ((ZEDalways) (cons (car sentence) (gather-verb (cdr sentence)))) (else ZEDerr))) (define (gather-noun sentence) (cond ((null? sentence) ZEDnil) ((ZED= #\space (car sentence)) ZEDnil) ((ZEDalways) (cons (car sentence) (gather-noun (cdr sentence)))) (else ZEDerr))) (define (by-three program) (cond ((null? program) ZEDnil) ((ZEDalways) (cons (wrap3 (car program) (cadr program) (caddr program)) (by-three (cdddr program)))) (else ZEDerr))) (define (do-it candidates) (cond ((ZEDalways) (map it candidates)) (else ZEDerr))) (define (it candidate) (cond ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\z #\e #\r #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\t #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\e #\l #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\t #\w #\e #\l #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\t #\h #\i #\r #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\f #\o #\u #\r #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap10 #\Z #\E #\D #\f #\i #\f #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap10 #\Z #\E #\D #\s #\i #\x #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\e #\i #\g #\h #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\n #\i #\n #\e #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\t #\w #\e #\n #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\t #\h #\i #\r #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((ZEDalways) candidate) (else ZEDerr))) (define (replace-candidate candidate) (cond ((null? candidate) ZEDnil) ((ZED= #\( (car candidate)) (cons #\( (replace-candidate (cdr candidate)))) ((ZEDalways) ZEDnil) (else ZEDerr))) (define (candidate-confirmed? candidate confirmed) (cond ((null? confirmed) (or (null? candidate) (or (ZED= #\space (car candidate)) (ZED= #\tab (car candidate))))) ((null? candidate) #false) ((ZED= #\( (car candidate)) (candidate-confirmed? (cdr candidate) confirmed)) ((ZEDalways) (and (ZED= (car candidate) (car confirmed)) (candidate-confirmed? (cdr candidate) (cdr confirmed)))) (else ZEDerr))) (define (strip program) (cond ((ZEDalways) (foldr append ZEDnil (do-it (strip1 program)))) (else ZEDerr))) (define (strip1 program) (cond ((null? program) ZEDnil) ((ZED= (car program) #\() (strip2 (grab-candidate program) program)) ((ZEDalways) (cons (wrap (car program)) (strip1 (cdr program)))) (else ZEDerr))) (define (grab-candidate program) (cond ((ZEDalways) (cons #\( (grab-candidate1 (cdr program)))) (else ZEDerr))) (define (grab-candidate1 program) (cond ((null? program) ZEDnil) ((or (ZED= #\space (car program)) (ZED= #\tab (car program))) (grab-candidate2 program)) ((ZEDalways) (cons (car program) (grab-candidate1 (cdr program)))) (else ZEDerr))) (define (grab-candidate2 program) (cond ((null? program) ZEDnil) ((ZED= #\space (car program)) (cons #\space (grab-candidate2 (cdr program)))) ((ZED= #\tab (car program)) (cons #\tab (grab-candidate2 (cdr program)))) ((ZEDalways) ZEDnil) (else ZEDerr))) (define (strip2 candidate program) (cond ((ZEDalways) (cons candidate (strip1 (my-remove (length candidate) program)))) (else ZEDerr))) (define (write-all! output-file program) (cond ((null? program) (close-output-port output-file)) ((ZEDalways) (begin (write-char (car program) output-file) (write-all! output-file (cdr program)))) (else ZEDerr))) (define (my-compile) (cond ((ZEDalways) (my-compile1 (open-input-file (must-get-file)) (open-input-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\PRELUDE.txt") "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP" (begin (when-file-exists "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP") (open-output-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP")) (begin (when-file-exists "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt") (open-output-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt")))) (else ZEDerr))) (define (must-get-file) (cond ((ZEDalways) (must-get-file1 (get-file))) (else ZEDerr))) (define (must-get-file1 ZEDpath) (cond (ZEDpath ZEDpath) ((ZEDalways) (must-get-file)) (else ZEDerr))) (define (when-file-exists path) (cond ((file-exists? path) (delete-file path)) (else ZEDerr))) (define (ZEDnot-return? ZEDcharacter) (cond ((ZEDalways) (not (ZED= #\return ZEDcharacter))) (else ZEDerr))) (define (my-compile1 ZED PRELUDE TEMP-path TEMP RACKET) (cond ((ZEDalways) (my-compile2 ZED PRELUDE TEMP-path TEMP RACKET (combine-program-clauses (by-three (read-sentences (discard (sentences (leading (space-newline (space-tab (repeats (newline-space (filter ZEDnot-return? (append (append (read-all! PRELUDE) (wrap2 #\newline #\newline)) (read-all! ZED))))))))))))))) (else ZEDerr))) (define (my-compile2 ZED PRELUDE TEMP-path TEMP RACKET combined) (cond ((ZEDalways) (my-compile3 ZED PRELUDE TEMP-path TEMP RACKET (programize combined (arity-hash combined)))) (else ZEDerr))) (define (my-compile3 ZED PRELUDE TEMP-path TEMP RACKET programized) (cond ((ZEDalways) (begin (display "#lang" TEMP) (begin (display #\space TEMP) (begin (display "racket/gui" TEMP) (begin (newline TEMP) (begin (display (primitives) TEMP) (begin (newline TEMP) (begin (display programized TEMP) (begin (close-output-port TEMP) (my-compile4 (open-input-file TEMP-path) RACKET)))))))))) (else ZEDerr))) (define (my-compile4 TEMP RACKET) (cond ((ZEDalways) (write-all! RACKET (strip (read-all! TEMP)))) (else ZEDerr))))