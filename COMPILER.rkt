#lang racket/gui
(provide my-compile)
(begin (define wrap list) (define wrap2 list) (define wrap3 list) (define wrap4 list) (define wrap5 list) (define wrap6 list) (define wrap7 list) (define wrap8 list) (define wrap9 list) (define wrap10 list) (define wrap11 list) (define wrap12 list) (define wrap13 list) (define wrap14 list) (define wrap15 list) (define wrap16 list) (define-syntax ZEDand (syntax-rules () ((_ a b) (and a b)))) (define-syntax ZEDor (syntax-rules () ((_ a b) (or a b)))) (define-syntax ZEDse (syntax-rules () ((_ a b) (begin a b)))) (define-syntax ZEDc (syntax-rules () ((_ a b) (cons (delay a) (delay b))))) (define (ZED1 pair) (force (car pair))) (define (ZED! pair) (force (cdr pair))) (define ZED= eqv?) (define ZEDerr (quote err)) (define ZEDnil (quote ())) (define (ZEDalways) #t) (define-syntax apply1 (syntax-rules () ((_ a b c d) (apply a b c d)))) (define-syntax apply2 (syntax-rules () ((_ a b c d e f) (apply a b c d e f)))) (define-syntax apply3 (syntax-rules () ((_ a b c d e f g h) (apply a b c d e f g h)))) (define-syntax apply4 (syntax-rules () ((_ a b c d e f g h i j) (apply a b c d e f g h i j)))) (define-syntax apply5 (syntax-rules () ((_ a b c d e f g h i j k l) (apply a b c d e f g h i j k l)))))
(begin (define (my-flatten tree) (cond ((not (pair? tree)) tree) ((null? (car tree)) (my-flatten (cdr tree))) ((pair? (car tree)) (append (my-flatten (car tree)) (my-flatten (cdr tree)))) ((not (pair? (car tree))) (cons (car tree) (my-flatten (cdr tree)))) (else ZEDerr))) (define (my-remove number list) (cond ((null? list) ZEDnil) ((= number 0) list) ((> number 0) (my-remove (- number 1) (cdr list))) (else ZEDerr))) (define (string->ZED string) (cond ((ZEDalways) (string->symbol (list->string (append (wrap3 #\Z #\E #\D) (my-flatten (map symbol-character (string->list string))))))) (else ZEDerr))) (define (symbol-character character) (cond ((ZED= character #\nul) (wrap2 #\@ #\!)) ((ZED= character #\u1) (wrap2 #\@ #\$)) ((ZED= character #\u2) (wrap2 #\@ #\%)) ((ZED= character #\u3) (wrap2 #\@ #\&)) ((ZED= character #\u4) (wrap2 #\@ #\*)) ((ZED= character #\u5) (wrap2 #\@ #\+)) ((ZED= character #\u6) (wrap2 #\@ #\-)) ((ZED= character #\u7) (wrap2 #\@ #\.)) ((ZED= character #\backspace) (wrap2 #\@ #\/)) ((ZED= character #\tab) (wrap2 #\@ #\:)) ((ZED= character #\newline) (wrap2 #\@ #\<)) ((ZED= character #\vtab) (wrap2 #\@ #\=)) ((ZED= character #\page) (wrap2 #\@ #\>)) ((ZED= character #\return) (wrap2 #\@ #\?)) ((ZED= character #\uE) (wrap2 #\@ #\A)) ((ZED= character #\uF) (wrap2 #\@ #\B)) ((ZED= character #\u10) (wrap2 #\@ #\C)) ((ZED= character #\u11) (wrap2 #\@ #\D)) ((ZED= character #\u12) (wrap2 #\@ #\E)) ((ZED= character #\u13) (wrap2 #\@ #\F)) ((ZED= character #\u14) (wrap2 #\@ #\G)) ((ZED= character #\u15) (wrap2 #\@ #\H)) ((ZED= character #\u16) (wrap2 #\@ #\I)) ((ZED= character #\u17) (wrap2 #\@ #\J)) ((ZED= character #\u18) (wrap2 #\@ #\K)) ((ZED= character #\u19) (wrap2 #\@ #\L)) ((ZED= character #\u1A) (wrap2 #\@ #\M)) ((ZED= character #\u1B) (wrap2 #\@ #\N)) ((ZED= character #\u1C) (wrap2 #\@ #\O)) ((ZED= character #\u1D) (wrap2 #\@ #\P)) ((ZED= character #\u1E) (wrap2 #\@ #\Q)) ((ZED= character #\u1F) (wrap2 #\@ #\R)) ((ZED= character #\space) (wrap2 #\@ #\S)) ((ZED= character #\@) (wrap2 #\@ #\@)) ((ZED= character #\") (wrap2 #\@ #\T)) ((ZED= character #\') (wrap2 #\@ #\U)) ((ZED= character #\() (wrap2 #\@ #\V)) ((ZED= character #\)) (wrap2 #\@ #\W)) ((ZED= character #\,) (wrap2 #\@ #\X)) ((ZED= character #\;) (wrap2 #\@ #\Y)) ((ZED= character #\[) (wrap2 #\@ #\Z)) ((ZED= character #\\) (wrap2 #\@ #\^)) ((ZED= character #\]) (wrap2 #\@ #\_)) ((ZED= character #\`) (wrap2 #\@ #\a)) ((ZED= character #\{) (wrap2 #\@ #\b)) ((ZED= character #\|) (wrap2 #\@ #\c)) ((ZED= character #\}) (wrap2 #\@ #\d)) ((ZED= character #\rubout) (wrap2 #\@ #\e)) ((not (char-graphic? character)) (wrap2 #\@ #\f)) ((char-graphic? character) character) (else ZEDerr))) (define (clause-name clause) (cond ((ZEDalways) (car clause)) (else ZEDerr))) (define (clause-arguments clause) (cond ((ZEDalways) (cadr clause)) (else ZEDerr))) (define (clause-arity clause) (cond ((ZEDalways) (length (clause-arguments clause))) (else ZEDerr))) (define (clause-body clause) (cond ((ZEDalways) (cddr clause)) (else ZEDerr))) (define (clause-name-agree a b) (cond ((eq? (clause-name a) (clause-name b)) (clause-name a)) (else ZEDerr))) (define (clause-arguments-agree a b) (cond ((equal? (clause-arguments a) (clause-arguments b)) (clause-arguments a)) (else ZEDerr))) (define (combine-clauses a b) (cond ((ZEDalways) (cons (clause-name-agree a b) (cons (clause-arguments-agree a b) (append (clause-body a) (clause-body b))))) (else ZEDerr))) (define (combine-head-clauses program) (cond ((ZEDalways) (cons (combine-clauses (car program) (cadr program)) (cddr program))) (else ZEDerr))) (define (ready-clause clause) (cond ((ZEDalways) (cons (caaar clause) (cons (cdar clause) (cdr clause)))) (else ZEDerr))) (define (ready-program program) (cond ((ZEDalways) (map ready-clause program)) (else ZEDerr))) (define (combine-all program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((ZED= (clause-name (car program)) (clause-name (cadr program))) (combine-all (combine-head-clauses program))) ((not (ZED= (clause-name (car program)) (clause-name (cadr program)))) (cons (car program) (combine-all (cdr program)))) (else ZEDerr))) (define (combine-program-clauses program) (cond ((ZEDalways) (combine-all (ready-program program))) (else ZEDerr))) (define (arity-hash1 clause) (cond ((ZEDalways) (cons (clause-name clause) (clause-arity clause))) (else ZEDerr))) (define (arity-hash program) (cond ((ZEDalways) (make-hasheq (append (map arity-hash1 program) (append (wrap16 (cons 'wrap 1) (cons 'wrap2 2) (cons 'wrap3 3) (cons 'wrap4 4) (cons 'wrap5 5) (cons 'wrap6 6) (cons 'wrap7 7) (cons 'wrap8 8) (cons 'wrap9 9) (cons 'wrap10 10) (cons 'wrap11 11) (cons 'wrap12 12) (cons 'wrap13 13) (cons 'wrap14 14) (cons 'wrap15 15) (cons 'wrap16 16)) (append (wrap16 (cons 'and 2) (cons 'append 2) (cons 'assoc 2) (cons 'begin 2) (cons 'boolean? 1) (cons 'caaar 1) (cons 'cadr 1) (cons 'caddr 1) (cons 'cadddr 1) (cons 'car 1) (cons 'cdar 1) (cons 'cddddr 1) (cons 'cddr 1) (cons 'cdr 1) (cons 'char? 1) (cons 'char-numeric? 1)) (append (wrap16 (cons 'char-graphic? 1) (cons 'close-input-port 1) (cons 'close-output-port 1) (cons 'cons 2) (cons 'define 2) (cons 'delete-file 1) (cons 'display 2) (cons 'eq? 2) (cons 'equal? 2) (cons 'eof-object? 1) (cons 'exact? 1) (cons 'file-exists? 1) (cons 'inexact? 1) (cons 'length 1) (cons 'list->string 1) (cons 'map 2)) (append (wrap16 (cons 'not 1) (cons 'null? 1) (cons 'number? 1) (cons 'newline 1) (cons 'number->string 1) (cons 'or 2) (cons 'open-input-file 1) (cons 'open-output-file 1) (cons 'pair? 1) (cons 'quote 1) (cons 'reverse 1) (cons 'read-char 1) (cons 'symbol? 1) (cons 'string? 1) (cons 'string-append 2) (cons 'string->symbol 1)) (append (wrap16 (cons 'symbol->string 1) (cons 'string->list 1) (cons 'string->number 1) (cons '= 2) (cons '< 2) (cons '> 2) (cons '- 2) (cons '+ 2) (cons '* 2) (cons '/ 2) (cons 'ZED1 1) (cons 'ZED! 1) (cons 'ZEDc 2) (cons 'ZEDone 1) (cons 'ZEDtwo 2) (cons 'ZEDthree 3)) (append (wrap16 (cons 'ZEDfour 4) (cons 'ZEDfive 5) (cons 'ZEDsix 6) (cons 'ZEDseven 7) (cons 'ZEDeight 8) (cons 'ZEDnine 9) (cons 'ZEDten 10) (cons 'force 1) (cons 'ZED= 2) (cons 'caar 1) (cons 'cdddr 1) (cons 'list 0) (cons 'ZEDalways 0) (cons 'apply 2) (cons 'ZEDse 2) (cons 'ZEDand 2)) (append (wrap16 (cons 'ZEDor 2) (cons 'ZEDeleven 11) (cons 'ZEDtwelve 12) (cons 'ZEDthirteen 13) (cons 'ZEDfourteen 14) (cons 'ZEDfifteen 15) (cons 'ZEDsixteen 16) (cons 'ZEDseventeen 17) (cons 'ZEDeighteen 18) (cons 'ZEDnineteen 19) (cons 'ZEDtwenty 20) (cons 'ZEDtwenty-one 21) (cons 'ZEDtwenty-two 22) (cons 'ZEDtwenty-three 23) (cons 'ZEDtwenty-four 24) (cons 'ZEDtwenty-five 25)) (append (wrap16 (cons 'ZEDtwenty-six 26) (cons 'ZEDtwenty-seven 27) (cons 'ZEDtwenty-eight 28) (cons 'ZEDtwenty-nine 29) (cons 'ZEDthirty 30) (cons 'ZEDthirty-one 31) (cons 'ZEDthirty-two 32) (cons 'get-file 0) (cons 'make-hasheq 1) (cons 'hash-ref 2) (cons 'apply1 4) (cons 'apply2 6) (cons 'apply3 8) (cons 'apply4 10) (cons 'apply5 12) (cons 'filter 2)) (append (wrap16 (cons 'foldr 3) (cons 'function-hack-2 2) (cons 'write-char 2) (cons 'ZEDthirty-three 33) (cons 'ZEDthirty-four 34) (cons 'ZEDthirty-five 35) (cons 'ZEDthirty-six 36) (cons 'ZEDthirty-seven 37) (cons 'ZEDthirty-eight 38) (cons 'ZEDthirty-nine 39) (cons 'ZEDforty 40) (cons 'ZEDforty-one 41) (cons 'ZEDforty-two 42) (cons 'ZEDforty-three 43) (cons 'ZEDforty-four 44) (cons 'ZEDforty-five 45)) (append (wrap16 (cons 'ZEDforty-six 46) (cons 'ZEDforty-seven 47) (cons 'ZEDforty-eight 48) (cons 'ZEDforty-nine 49) (cons 'ZEDfifty 50) (cons 'ZEDfifty-one 51) (cons 'ZEDfifty-two 52) (cons 'ZEDfifty-three 53) (cons 'ZEDfifty-four 54) (cons 'ZEDfifty-five 55) (cons 'ZEDfifty-six 56) (cons 'ZEDfifty-seven 57) (cons 'ZEDfifty-eight 58) (cons 'ZEDfifty-nine 59) (cons 'ZEDsixty 60) (cons 'ZEDsixty-one 61)) (append (wrap16 (cons 'ZEDsixty-two 62) (cons 'ZEDsixty-three 63) (cons 'ZEDsixty-four 64) (cons 'ZEDsixty-five 65) (cons 'ZEDsixty-six 66) (cons 'ZEDsixty-seven 67) (cons 'ZEDsixty-eight 68) (cons 'ZEDsixty-nine 69) (cons 'ZEDseventy 70) (cons 'ZEDseventy-one 71) (cons 'ZEDseventy-two 72) (cons 'ZEDseventy-three 73) (cons 'ZEDseventy-four 74) (cons 'ZEDseventy-five 75) (cons 'ZEDseventy-six 76) (cons 'ZEDseventy-seven 77)) (append (wrap16 (cons 'ZEDseventy-eight 78) (cons 'ZEDseventy-nine 79) (cons 'ZEDeighty 80) (cons 'ZEDeighty-one 81) (cons 'ZEDeighty-two 82) (cons 'ZEDeighty-three 83) (cons 'ZEDeighty-four 84) (cons 'ZEDeighty-five 85) (cons 'ZEDeighty-six 86) (cons 'ZEDeighty-seven 87) (cons 'ZEDeighty-eight 88) (cons 'ZEDeighty-nine 89) (cons 'ZEDninety 90) (cons 'ZEDninety-one 91) (cons 'ZEDninety-two 92) (cons 'ZEDninety-three 93)) (wrap6 (cons 'ZEDninety-four 94) (cons 'ZEDninety-five 95) (cons 'ZEDninety-six 96) (cons 'ZEDninety-seven 97) (cons 'ZEDninety-eight 98) (cons 'ZEDninety-nine 99))))))))))))))))) (else ZEDerr))) (define (arity function arity-hash) (cond ((ZEDalways) (hash-ref arity-hash function)) (else ZEDerr))) (define (primitives) (cond ((ZEDalways) (append (wrap16 'begin (quote (define wrap list)) (quote (define wrap2 list)) (quote (define wrap3 list)) (quote (define wrap4 list)) (quote (define wrap5 list)) (quote (define wrap6 list)) (quote (define wrap7 list)) (quote (define wrap8 list)) (quote (define wrap9 list)) (quote (define wrap10 list)) (quote (define wrap11 list)) (quote (define wrap12 list)) (quote (define wrap13 list)) (quote (define wrap14 list)) (quote (define wrap15 list))) (wrap16 (quote (define wrap16 list)) (wrap3 'define-syntax 'ZEDand (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'and 'a 'b)))) (wrap3 'define-syntax 'ZEDor (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'or 'a 'b)))) (wrap3 'define-syntax 'ZEDse (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'begin 'a 'b)))) (wrap3 'define-syntax 'ZEDc (wrap3 'syntax-rules ZEDnil (wrap2 (wrap3 '_ 'a 'b) (wrap3 'cons (wrap2 'delay 'a) (wrap2 'delay 'b))))) (quote (define (ZED1 pair) (force (car pair)))) (quote (define (ZED! pair) (force (cdr pair)))) (quote (define ZED= eqv?)) (quote (define ZEDerr 'err)) (wrap3 'define 'ZEDnil (wrap2 'quote ZEDnil)) (quote (define (ZEDalways) #true)) (wrap3 'define-syntax 'apply1 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap5 '_ 'a 'b 'c 'd) (wrap5 'apply 'a 'b 'c 'd)))) (wrap3 'define-syntax 'apply2 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap7 '_ 'a 'b 'c 'd 'e 'f) (wrap7 'apply 'a 'b 'c 'd 'e 'f)))) (wrap3 'define-syntax 'apply3 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap9 '_ 'a 'b 'c 'd 'e 'f 'g 'h) (wrap9 'apply 'a 'b 'c 'd 'e 'f 'g 'h)))) (wrap3 'define-syntax 'apply4 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap11 '_ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j) (wrap11 'apply 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j)))) (wrap3 'define-syntax 'apply5 (wrap3 'syntax-rules ZEDnil (wrap2 (wrap13 '_ 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l) (wrap13 'apply 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l))))))) (else ZEDerr))) (define (application? expression) (cond ((ZEDalways) (and (not (null? expression)) (pair? (car expression)))) (else ZEDerr))) (define (function expression) (cond ((ZEDalways) (caar expression)) (else ZEDerr))) (define (double-application? expression) (cond ((null? expression) #false) ((null? (cdr expression)) #false) ((not (null? (cdr expression))) (and (pair? (car expression)) (pair? (cadr expression)))) (else ZEDerr))) (define (schemefy1 expression arity-hash) (cond ((not (application? expression)) (car expression)) ((ZED= 0 (arity (function expression) arity-hash)) (car expression)) ((double-application? expression) (cons (function expression) (cons (schemefy1 (cdr expression) arity-hash) (gather (- (arity (function expression) arity-hash) 1) (my-remove (+ 1 (length (my-flatten (schemefy1 (cdr expression) arity-hash)))) expression) arity-hash)))) ((application? expression) (cons (function expression) (gather (arity (function expression) arity-hash) (cdr expression) arity-hash))) (else ZEDerr))) (define (schemefy expression arity-hash) (cond ((ZEDalways) (wrap (schemefy1 expression arity-hash))) (else ZEDerr))) (define (gather how-many expression arity-hash) (cond ((= how-many 0) ZEDnil) ((application? expression) (append (schemefy expression arity-hash) (gather (- how-many 1) (my-remove (length (my-flatten (schemefy expression arity-hash))) expression) arity-hash))) ((not (application? expression)) (cons (car expression) (gather (- how-many 1) (cdr expression) arity-hash))) (else ZEDerr))) (define (map-with function-hack-2 list extra) (cond ((null? list) ZEDnil) ((not (null? list)) (cons (function-hack-2 (car list) extra) (map-with function-hack-2 (cdr list) extra))) (else ZEDerr))) (define (functionize function arity-hash) (cond ((ZEDalways) (wrap3 'define (cons (car function) (cadr function)) (cons 'cond (append (condefy (map-with schemefy (cddr function) arity-hash)) (wrap (wrap2 'else 'ZEDerr)))))) (else ZEDerr))) (define (condefy clauses) (cond ((null? clauses) ZEDnil) ((not (null? clauses)) (cons (append (car clauses) (cadr clauses)) (condefy (cddr clauses)))) (else ZEDerr))) (define (programize program arity-hash) (cond ((ZEDalways) (cons 'begin (map-with functionize program arity-hash))) (else ZEDerr))) (define (namefy expression) (cond ((null? expression) ZEDnil) ((pair? expression) (wrap (symbolize (car expression)))) ((not (pair? expression)) (flexify expression)) (else ZEDerr))) (define (symbolize expression) (cond ((symbol? expression) (string->ZED (symbol->string expression))) ((string? expression) (string->symbol expression)) ((number? expression) (string->ZED (number->string expression))) (else ZEDerr))) (define (flexify expression) (cond ((symbol? expression) (flexify1 (string->list (symbol->string expression)))) ((string? expression) (string->symbol expression)) ((boolean? expression) expression) ((char? expression) expression) ((exact? expression) expression) ((inexact? expression) (string->number (string-append "#e" (number->string expression)))) (else ZEDerr))) (define (flexify1 list) (cond ((and (ZED= #\# (car list)) (and (ZED= #\0 (cadr list)) (not (null? (cddr list))))) (string->symbol (list->string (append (wrap3 #\# #\\ #\u) (cddr list))))) ((or (equal? list (wrap5 #\# #\t #\r #\u #\e)) (equal? list (wrap6 #\# #\f #\a #\l #\s #\e))) (string->symbol (list->string list))) ((ZED= (car list) #\#) (string->symbol (list->string (append (wrap2 #\# #\\) (cdr list))))) ((not (ZED= (car list) #\#)) (string->ZED (list->string list))) (else ZEDerr))) (define (read-all! port) (cond ((ZEDalways) (read-all1 port (read-char port))) (else ZEDerr))) (define (read-all1 port character) (cond ((eof-object? character) (begin (close-input-port port) ZEDnil)) ((not (eof-object? character)) (cons character (read-all! port))) (else ZEDerr))) (define (newline-space1 program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\newline (car program)) (or (ZED= #\space (cadr program)) (ZED= #\tab (cadr program)))) (newline-space1 (cdr program))) ((ZED= #\newline (car program)) (cons #\newline (newline-space1 (cdr program)))) ((not (ZED= #\newline (car program))) (cons (car program) (newline-space1 (cdr program)))) (else ZEDerr))) (define (again program) (cond ((ZEDalways) (again1 program (newline-space1 program))) (else ZEDerr))) (define (again1 program newline-space1) (cond ((equal? program newline-space1) program) ((not (equal? program newline-space1)) (again newline-space1)) (else ZEDerr))) (define (newline-space program) (cond ((ZEDalways) (append (again program) (wrap #\newline))) (else ZEDerr))) (define (repeats program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\newline (car program)) (ZED= #\newline (cadr program))) (repeats (cdr program))) ((and (or (ZED= #\space (car program)) (ZED= #\tab (car program))) (or (ZED= #\space (cadr program)) (ZED= #\tab (cadr program)))) (repeats (cdr program))) ((ZEDalways) (cons (car program) (repeats (cdr program)))) (else ZEDerr))) (define (space-tab program) (cond ((null? program) ZEDnil) ((ZED= #\tab (car program)) (cons #\space (space-tab (cdr program)))) ((ZEDalways) (cons (car program) (space-tab (cdr program)))) (else ZEDerr))) (define (space-newline program) (cond ((null? program) ZEDnil) ((null? (cdr program)) program) ((and (ZED= #\space (car program)) (ZED= #\newline (cadr program))) (space-newline (cdr program))) ((ZEDalways) (cons (car program) (space-newline (cdr program)))) (else ZEDerr))) (define (leading program) (cond ((null? program) ZEDnil) ((ZED= #\newline (car program)) (cdr program)) ((ZEDalways) program) (else ZEDerr))) (define (sentences program) (cond ((ZEDalways) (sentences1 program ZEDnil)) (else ZEDerr))) (define (sentences1 program accumulator) (cond ((null? program) ZEDnil) ((ZED= #\newline (car program)) (cons (reverse accumulator) (sentences1 (cdr program) ZEDnil))) ((ZEDalways) (sentences1 (cdr program) (cons (car program) accumulator))) (else ZEDerr))) (define (discard program) (cond ((null? program) ZEDnil) ((ZEDalways) (cons (car program) (cons (caddr program) (cons (cadddr program) (discard (cddddr program)))))) (else ZEDerr))) (define (read-sentence sentence) (cond ((null? sentence) ZEDnil) ((ZED= #\space (car sentence)) (read-sentence (cdr sentence))) ((ZED= #\( (car sentence)) (cons (namefy (wrap (verb (gather-verb (cdr sentence))))) (read-sentence (my-remove (+ 2 (length (gather-verb (cdr sentence)))) sentence)))) ((ZEDalways) (cons (noun (list->string (gather-noun sentence))) (read-sentence (my-remove (length (gather-noun sentence)) sentence)))) (else ZEDerr))) (define (verb gather-verb) (cond ((and (not (null? (cdr gather-verb))) (and (ZED= #\" (car gather-verb)) (ZED= #\" (car (reverse gather-verb))))) (list->string (cdr (reverse (cdr (reverse gather-verb)))))) ((ZEDalways) (string->symbol (list->string gather-verb))) (else ZEDerr))) (define (noun string) (cond ((ZEDalways) (noun-number string (string->number string))) (else ZEDerr))) (define (noun-number noun number) (cond ((ZEDalways) (namefy (noun-number1 noun number))) (else ZEDerr))) (define (noun-number1 noun number) (cond (number number) ((and (ZED= #\" (car (string->list noun))) (ZED= #\" (car (reverse (string->list noun))))) (list->string (cdr (reverse (cdr (reverse (string->list noun))))))) ((ZEDalways) (string->symbol noun)) (else ZEDerr))) (define (read-sentences sentences) (cond ((ZEDalways) (map read-sentence sentences)) (else ZEDerr))) (define (gather-verb sentence) (cond ((ZED= #\) (car sentence)) ZEDnil) ((ZEDalways) (cons (car sentence) (gather-verb (cdr sentence)))) (else ZEDerr))) (define (gather-noun sentence) (cond ((null? sentence) ZEDnil) ((ZED= #\space (car sentence)) ZEDnil) ((ZEDalways) (cons (car sentence) (gather-noun (cdr sentence)))) (else ZEDerr))) (define (by-three program) (cond ((null? program) ZEDnil) ((ZEDalways) (cons (wrap3 (car program) (cadr program) (caddr program)) (by-three (cdddr program)))) (else ZEDerr))) (define (do-it candidates) (cond ((ZEDalways) (map it candidates)) (else ZEDerr))) (define (it candidate) (cond ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap7 #\Z #\E #\D #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap6 #\Z #\E #\D #\t #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\e #\l #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\t #\w #\e #\l #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\t #\h #\i #\r #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\f #\o #\u #\r #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap10 #\Z #\E #\D #\f #\i #\f #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap10 #\Z #\E #\D #\s #\i #\x #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\e #\i #\g #\h #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap11 #\Z #\E #\D #\n #\i #\n #\e #\t #\e #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\t #\w #\e #\n #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\w #\e #\n #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\t #\h #\i #\r #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\t #\h #\i #\r #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\f #\o #\r #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\f #\o #\r #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\f #\i #\f #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\f #\i #\f #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap8 #\Z #\E #\D #\s #\i #\x #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap12 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\s #\i #\x #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap10 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap16 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap16 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap16 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\s #\e #\v #\e #\n #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\e #\i #\g #\h #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\e #\i #\g #\h #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap9 #\Z #\E #\D #\n #\i #\n #\e #\t #\y)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\o #\n #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\t #\w #\o)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\t #\h #\r #\e #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\f #\o #\u #\r)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\f #\i #\v #\e)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap13 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\s #\i #\x)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\s #\e #\v #\e #\n)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap15 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\e #\i #\g #\h #\t)) (replace-candidate candidate)) ((candidate-confirmed? candidate (wrap14 #\Z #\E #\D #\n #\i #\n #\e #\t #\y #\- #\n #\i #\n #\e)) (replace-candidate candidate)) ((ZEDalways) candidate) (else ZEDerr))) (define (replace-candidate candidate) (cond ((null? candidate) ZEDnil) ((ZED= #\( (car candidate)) (cons #\( (replace-candidate (cdr candidate)))) ((ZEDalways) ZEDnil) (else ZEDerr))) (define (candidate-confirmed? candidate confirmed) (cond ((null? confirmed) (or (null? candidate) (or (ZED= #\space (car candidate)) (ZED= #\tab (car candidate))))) ((null? candidate) #false) ((ZED= #\( (car candidate)) (candidate-confirmed? (cdr candidate) confirmed)) ((ZEDalways) (and (ZED= (car candidate) (car confirmed)) (candidate-confirmed? (cdr candidate) (cdr confirmed)))) (else ZEDerr))) (define (strip program) (cond ((ZEDalways) (foldr append ZEDnil (do-it (strip1 program)))) (else ZEDerr))) (define (strip1 program) (cond ((null? program) ZEDnil) ((ZED= (car program) #\() (strip2 (grab-candidate program) program)) ((ZEDalways) (cons (wrap (car program)) (strip1 (cdr program)))) (else ZEDerr))) (define (grab-candidate program) (cond ((ZEDalways) (cons #\( (grab-candidate1 (cdr program)))) (else ZEDerr))) (define (grab-candidate1 program) (cond ((null? program) ZEDnil) ((or (ZED= #\space (car program)) (ZED= #\tab (car program))) (grab-candidate2 program)) ((ZEDalways) (cons (car program) (grab-candidate1 (cdr program)))) (else ZEDerr))) (define (grab-candidate2 program) (cond ((null? program) ZEDnil) ((ZED= #\space (car program)) (cons #\space (grab-candidate2 (cdr program)))) ((ZED= #\tab (car program)) (cons #\tab (grab-candidate2 (cdr program)))) ((ZEDalways) ZEDnil) (else ZEDerr))) (define (strip2 candidate program) (cond ((ZEDalways) (cons candidate (strip1 (my-remove (length candidate) program)))) (else ZEDerr))) (define (write-all! output-file program) (cond ((null? program) (close-output-port output-file)) ((ZEDalways) (begin (write-char (car program) output-file) (write-all! output-file (cdr program)))) (else ZEDerr))) (define (my-compile) (cond ((ZEDalways) (my-compile1 (open-input-file (must-get-file)) (open-input-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\PRELUDE.txt") "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP" (begin (when-file-exists "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP") (open-output-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\TEMP.TEMP")) (begin (when-file-exists "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt") (open-output-file "C:\\Users\\Zelah\\Desktop\\ZEDWIN\\RACKET.rkt")))) (else ZEDerr))) (define (must-get-file) (cond ((ZEDalways) (must-get-file1 (get-file))) (else ZEDerr))) (define (must-get-file1 ZEDpath) (cond (ZEDpath ZEDpath) ((ZEDalways) (must-get-file)) (else ZEDerr))) (define (when-file-exists path) (cond ((file-exists? path) (delete-file path)) (else ZEDerr))) (define (ZEDnot-return? ZEDcharacter) (cond ((ZEDalways) (not (ZED= #\return ZEDcharacter))) (else ZEDerr))) (define (my-compile1 ZED PRELUDE TEMP-path TEMP RACKET) (cond ((ZEDalways) (my-compile2 ZED PRELUDE TEMP-path TEMP RACKET (combine-program-clauses (by-three (read-sentences (discard (sentences (leading (space-newline (space-tab (repeats (newline-space (filter ZEDnot-return? (append (append (read-all! PRELUDE) (wrap2 #\newline #\newline)) (read-all! ZED))))))))))))))) (else ZEDerr))) (define (my-compile2 ZED PRELUDE TEMP-path TEMP RACKET combined) (cond ((ZEDalways) (my-compile3 ZED PRELUDE TEMP-path TEMP RACKET (programize combined (arity-hash combined)))) (else ZEDerr))) (define (my-compile3 ZED PRELUDE TEMP-path TEMP RACKET programized) (cond ((ZEDalways) (begin (display "#lang" TEMP) (begin (display #\space TEMP) (begin (display "racket/gui" TEMP) (begin (newline TEMP) (begin (display (primitives) TEMP) (begin (newline TEMP) (begin (display programized TEMP) (begin (close-output-port TEMP) (my-compile4 (open-input-file TEMP-path) RACKET)))))))))) (else ZEDerr))) (define (my-compile4 TEMP RACKET) (cond ((ZEDalways) (write-all! RACKET (strip (read-all! TEMP)))) (else ZEDerr))))