(2) list
[1 2 ...]
(always)
(ref) 2 list

(3) list
[1 2 3 ...]
(always)
(ref) 3 list

(4) list
[1 2 3 4 ...]
(always)
(ref) 4 list

(5) list
[1 2 3 4 5 ...]
(always)
(ref) 5 list

(6) list
[1 2 3 4 5 6 ...]
(always)
(ref) 6 list

(7) list
[1 2 3 4 5 6 7 ...]
(always)
(ref) 7 list

(8) list
[1 2 3 4 5 6 7 8 ...]
(always)
(ref) 8 list

(9) list
[1 2 3 4 5 6 7 8 9 ...]
(always)
(ref) 9 list

(10) list
[1 2 3 4 5 6 7 8 9 10 ...]
(always)
(ref) 10 list

(-2) list
[1 2 ...]
(always)
(tails) 2 list

(-3) list
[1 2 3 ...]
(always)
(tails) 3 list

(-4) list
[1 2 3 4 ...]
(always)
(tails) 4 list

(-5) list
[1 2 3 4 5 ...]
(always)
(tails) 5 list

(-6) list
[1 2 3 4 5 6 ...]
(always)
(tails) 6 list

(-7) list
[1 2 3 4 5 6 7 ...]
(always)
(tails) 7 list

(-8) list
[1 2 3 4 5 6 7 8 ...]
(always)
(tails) 8 list

(-9) list
[1 2 3 4 5 6 7 8 9 ...]
(always)
(tails) 9 list

(-10) list
[1 2 3 4 5 6 7 8 9 10 ...]
(always)
(tails) 10 list

(<) one two
comment
(always)
("apply") "<" ("wrap2") one two

(>) one two
comment
(always)
("apply") ">" ("wrap2") one two

(-) one two
comment
(always)
("apply") "-" ("wrap2") one two

(+) one two
comment
(always)
("apply") "+" ("wrap2") one two

(*) one two
comment
(always)
("apply") "*" ("wrap2") one two

(/) one two
comment
(always)
("apply") "/" ("wrap2") one two

(add1) number
comment
(always)
("apply") "add1" ("wrap") number

(add-between) item list
comment
(null?) list
nil

(add-between) item list
comment
(null?) (!) list
list

(add-between) item list
comment
(not) (null?) (!) list
(c) (1) list
    (c) item
        (add-between) item (!) list

(append) list1 list2
comment
(null?) list1
list2

(append) list1 list2
comment
(always)
(c) (1) list1 (append) (!) list1 list2

(append-output-file) output-file
comment
(always)
("apply1") "open-output-file"
              ("wrap") output-file
              "#:exists"
              "'append"

(bit) generator
a random boolean
(always)
(=) 2 (random) generator 2

(bits) runs
[1 2 3 2 ...]
(always)
(reduce-append) (ZEDbits) runs

(ZEDbits) runs
[ ]
(null?) runs
nil

(ZEDbits) runs
[1 2 3 2 ...]
(always)
(c) (append) (repeat) (sub1) (1) runs
                      #true
             (wrap) #false
    (ZEDbits) (!) runs

(bits->byte) bits
comment
(always)
(ZEDbits->byte) bits 0

(ZEDbits->byte) bits accumulator
comment
(null?) bits
accumulator

(ZEDbits->byte) bits accumulator
comment
(1) bits
(ZEDbits->byte) (!) bits
                (+) 1 (*) 2 accumulator

(ZEDbits->byte) bits accumulator
comment
(always)
(ZEDbits->byte) (!) bits
                (*) 2 accumulator

(bits->bytes) bits
comment
(always)
(mp) bits->byte (group8) bits

(boolean?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "boolean?" ("wrap") value

(byte->bits) byte
comment
(always)
(append) (repeat) (-) 8 (length) (ZEDbyte->bits) byte
                  #false
         (reverse) (ZEDbyte->bits) byte

(ZEDbyte->bits) byte
comment
(zero?) byte
nil

(ZEDbyte->bits) byte
comment
(odd?) byte
(c) #true (ZEDbyte->bits) (/) (-) byte 1 2

(ZEDbyte->bits) byte
comment
(even?) byte
(c) #false (ZEDbyte->bits) (/) byte 2

(bytes->bits) bytes
[90 90 90 ...]
(always)
(reduce-append) (mp) byte->bits bytes

(byte-string->path) byte-string
accessing the underlying Racket/Scheme function
(always)
("apply") "bytes->path" ("wrap") byte-string

(byte-string-append) byte-string1 byte-string2
accessing the underlying Racket/Scheme function
(always)
("apply") "bytes-append" ("wrap2") byte-string1 byte-string2

(character?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "char?" ("wrap") value

(character->integer) character
accessing the underlying Racket/Scheme function
(always)
("apply") "char->integer"
          ("wrap") character

(character->string) character
comment
(always)
("apply") "list->string" ("wrap") ("wrap") character

(close-input-port) port
accessing the underlying Racket/Scheme function
(always)
("apply") "close-input-port" ("wrap") port

(close-output-port) port
accessing the underlying Racket/Scheme function
(always)
("apply") "close-output-port" ("wrap") port

(collect-garbage)
accessing the underlying Racket/Scheme function
(always)
("apply") "collect-garbage" nil

(count) number
comment
(always)
(c) number (count) (add1) number

(current-memory-use)
accessing the underlying Racket/Scheme function
(always)
("apply") "current-memory-use" nil

(current-random-number-generator)
accessing the underlying Racket/Scheme function
(always)
("apply") "current-pseudo-random-generator" nil

(default-input-port)
accessing the underlying Racket/Scheme function
(always)
("apply") "current-input-port" nil

(default-output-port)
accessing the underlying Racket/Scheme function
(always)
("apply") "current-output-port" nil

(delete-file) file
accessing the underlying Racket/Scheme function
(always)
("apply") "delete-file" ("wrap") file

(delete-file-if-exists) file
comment
(file-exists?) file
(delete-file) file

(display) port item
accessing the underlying Racket/Scheme function
(always)
("apply") "display" ("wrap2") item port

(dr) value
comment
(always)
(se) (display) (default-output-port) (pr) (ZEDdr) value
     (se) (newline) (default-output-port)
     (se) (newline) (default-output-port)
     value

(ZEDdr) value
comment
(pair?) value
(mp) ZEDdr (first) 64 value

(ZEDdr) value
comment
(always)
value

(drr) value
comment
(always)
(se) (display) (default-output-port) (pr) value
     (se) (newline) (default-output-port)
     (se) (newline) (default-output-port)
     value

(end-of-file-object)
accessing the underlying Racket/Scheme function
(always)
"eof"

(end-of-file-object?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "eof-object?" ("wrap") value

(eq?) symbol1 symbol2
accessing the underlying Racket/Scheme function
(always)
("apply") "eq?" ("wrap2") symbol1 symbol2

(equal?) list1 list2
comment
(or) (null?) list1 (null?) list2
(and) (null?) list1 (null?) list2

(equal?) list1 list2
comment
(not) (pair?) list1
(=) list1 list2

(equal?) list1 list2
comment
(always)
(and) (equal?) (1) list1 (1) list2
      (equal?) (!) list1 (!) list2

(even?) number
accessing the underlying Racket/Scheme function
(always)
("apply") "even?" ("wrap") number

(exact->inexact) number
accessing the underlying Racket/Scheme function
(always)
("apply") "exact->inexact" ("wrap") number

(fi) function list
comment
(null?) list
nil

(fi) function list
comment
(two) function (1) list
(c) (1) list (fi) function (!) list

(fi) function list
comment
(always)
(fi) function (!) list

(file-exists?) file
accessing the underlying Racket/Scheme function
(always)
("apply") "file-exists?" ("wrap") file

(file-size) file
accessing the underlying Racket/Scheme function
(always)
("apply") "file-size" ("wrap") file

(first) number list
comment
(not) (pair?) list
list

(first) number list
comment
(zero?) number
nil

(first) number list
comment
(positive?) number
(c) (1) list
    (first) (sub1) number
            (!) list

(generate-symbol) base
accessing the underlying Racket/Scheme function
(always)
("apply") "gensym" ("wrap") base

(get-file) message
accessing the underlying Racket/Scheme function
(always)
("apply") "get-file" ("wrap") message

(get-run) bits
[#true #false #true ...]
(1) bits
(+) 1 (get-run) (!) bits

(get-run) bits
[#false #true #false ...]
(always)
1

(get-text-from-user) title message
accessing the underlying Racket/Scheme function
(always)
("apply") "get-text-from-user"
          ("wrap2") title message

(gr) garbage value
comment
(always)
(se) (dr) garbage value

(group8) list
nil
(null?) list
nil

(group8) list
[#false #true #false #true #true #false #true #false ...]
(always)
(c) (first) 8 list
    (group8) (-8) list

(grr) garbage value
comment
(always)
(se) (drr) garbage value

(last) list
comment
(null?) list
err

(last) list
comment
(null?) (!) list
(1) list

(last) list
comment
(always)
(last) (!) list

(length) list
comment
(null?) list
0

(length) list
comment
(always)
(add1) (length) (!) list

(list?) list
comment
(null?) list
#true

(list?) list
comment
(pair?) list
(list?) (!) list

(list?) list
comment
(always)
#false

(list->racket) list
comment
(null?) list
nil

(list->racket) list
comment
(always)
("cons") (1) list (list->racket) (!) list

(list->string) list
comment
(always)
("apply") "string-append" ("apply") "flatten" ("wrap") (ZEDlist->string) list

(ZEDlist->string) list
comment
(null?) list
nil

(ZEDlist->string) list
comment
(not) (pair?) list
(ZEDlist->string) (wrap2) "","" list

(ZEDlist->string) list
comment
(null?) (1) list
(ZEDlist->string) (!) list

(ZEDlist->string) list
comment
(pair?) (1) list
("cons") (ZEDlist->string) (1) list
         (ZEDlist->string) (!) list

(ZEDlist->string) list
comment
(always)
("cons") ("apply")
           "call-with-output-string"
           ("wrap") ("apply") ("apply") "curry" ("wrap") "curry"
                              ("wrap2") "display" (1) list
         (ZEDlist->string) (!) list

(list->ZED) list
comment
(null?) list
nil

(list->ZED) list
comment
(always)
(c) ("car") list
    (list->ZED) ("cdr") list

(make-random-number-generator)
accessing the underlying Racket/Scheme function
(always)
("apply") "make-pseudo-random-generator" nil

(many) function count value
core 0 [1 1 2 4 ...]
(<) count 1
value

(many) function count value
core 22 [1 2 5 2 ...]
(always)
(many) function (sub1) count (two) function value

(maximum) number1 number2
comment
(always)
("apply") "max" ("wrap2") number1 number2

(member?) value list
comment
(null?) list
#false

(member?) value list
comment
(=) value (1) list
#true

(member?) value list
comment
(always)
(member?) value (!) list

(message) list
comment
(always)
(list->string) (add-between) #space list

(message-box) title message
accessing the underlying Racket/Scheme function
(always)
("apply") "message-box" ("wrap2") title message

(modulo) large small
comment
(always)
("apply") "modulo" ("wrap2") large small

(mp) function list
comment
(null?) list
nil

(mp) function list
comment
(pair?) list
(c) (two) function (1) list
    (mp) function (!) list

(mp) function list
comment
(always)
(two) function list

(multiple?) small large
comment
(always)
(=) 0 (modulo) large small

(negative?) number
comment
(always)
(<) number 0

(newline) port
accessing the underlying Racket/Scheme function
(always)
("apply") "newline" ("wrap") port

(non) runs
[1 2 3 2 ...]
(=) 1 (1) runs
(non) (!) runs

(non) runs
[2 3 2 1 ...]
(always)
(1) runs

(not) boolean
accessing the underlying Racket/Scheme function
(always)
("apply") "not" ("wrap") boolean

(null?) list
accessing the underlying Racket/Scheme function
(always)
("apply") "null?" ("wrap") list

(number?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "number?" ("wrap") value

(number->string) number
accessing the underlying Racket/Scheme function
(always)
("apply") "number->string" ("wrap") number

(odd?) number
accessing the underlying Racket/Scheme function
(always)
("apply") "odd?" ("wrap") number

(ones) runs
[1 1 1 2 1 3 ...]
(=) 1 (1) runs
(add1) (ones) (!) runs

(ones) runs
[2 1 3 1 1 1 ...]
(always)
0

(open-input-file) path
accessing the underlying Racket/Scheme function
(always)
("apply") "open-input-file" ("wrap") path

(open-output-file) path
accessing the underlying Racket/Scheme function
(always)
("apply") "open-output-file" ("wrap") path

(pair?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "pair?" ("wrap") value

(path->byte-string) path
accessing the underlying Racket/Scheme function
(always)
("apply") "path->bytes" ("wrap") path

(positive?) number
comment
(always)
(>) number 0

(pr) list
comment
(always)
(list->string) (ZEDpr) list

(ZEDpr) list
comment
(list?) list
(append) (append) (wrap) #[ (add-between) #space (mp) ZEDpr list (wrap) #]

(ZEDpr) list
comment
(always)
list

(predictable-random-bits) seed
333
(always)
(se) (random-seed) seed
     (ZEDpredictable-random-bits) (current-random-number-generator)

(ZEDpredictable-random-bits) generator
all random bits
(always)
(c) (bit) generator (ZEDpredictable-random-bits) generator

(random-number-generator->vector) generator
accessing the underlying Racket/Scheme function
(always)
("apply") "pseudo-random-generator->vector" ("wrap") generator

(random-number-generator?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "pseudo-random-generator?" ("wrap") value

(put-file) message
accessing the underlying Racket/Scheme function
(always)
("apply") "put-file" ("wrap") message

(quotient) numerator denominator
accessing the underlying Racket/Scheme function
(always)
("apply") "quotient" ("wrap2") numerator denominator

(random) generator range
accessing the underlying Racket/Scheme function
(always)
(add1) ("apply") "random" ("wrap2") range generator

(random-number-generator-vector?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "pseudo-random-generator-vector?" ("wrap") value

(random-seed) number
accessing the underlying Racket/Scheme function
(always)
("apply") "random-seed" ("wrap") number

(read) port
accessing the underlying Racket/Scheme function
(always)
("apply") "read" ("wrap") port

(read-byte) port
accessing the underlying Racket/Scheme function
(always)
("apply") "read-byte" ("wrap") port

(read-bytes) path
comment
(always)
(ZEDread-bytes) (open-input-file) path

(ZEDread-bytes) port
comment
(always)
(ZEDread-bytes1) port (read-byte) port

(ZEDread-bytes1) port byte
comment
(end-of-file-object?) byte
(se) (close-input-port) port nil

(ZEDread-bytes1) port byte
comment
(always)
(c) byte (ZEDread-bytes) port

(reduce) final function list
comment
(null?) list
final

(reduce) final function list
comment
(always)
(ZEDreduce) final function (!) list (1) list

(ZEDreduce) final function list accumulator
comment
(null?) list
(three) function accumulator final

(ZEDreduce) final function list accumulator
comment
(always)
(ZEDreduce) final function (!) list (three) function accumulator (1) list

(reduce-append) list
comment
(null?) list
nil

(reduce-append) list
comment
(null?) (1) list
(reduce-append) (!) list

(reduce-append) list
comment
(always)
(ZEDreduce-append) (1) list (!) list

(ZEDreduce-append) list1 list2
comment
(null?) list1
(reduce-append) list2

(ZEDreduce-append) list1 list2
comment
(always)
(c) (1) list1 (ZEDreduce-append) (!) list1 list2

(ref) number list
comment
(=) number 1
(1) list

(ref) number list
comment
(>) number 1
(ref) (sub1) number (!) list

(remove) value list
comment
(null?) list
nil

(remove) value list
comment
(=) value (1) list
(!) list

(remove) value list
comment
(always)
(c) (1) list (remove) value (!) list

(remove-with-equal) value list
comment
(equal?) value (1) list
(!) list

(remove-with-equal) value list
comment
(always)
(c) (1) list (remove-with-equal) value (!) list

(repeat) number item
comment
(zero?) number
nil

(repeat) number item
comment
(positive?) number
(c) item (repeat) (sub1) number item

(replace-output-file) output-file
comment
(always)
("apply1") "open-output-file"
           ("wrap") output-file
           "#:exists"
           "'replace"                          

(reverse) list
comment
(always)
(ZEDreverse) list nil

(ZEDreverse) list reverse
comment
(null?) list
reverse

(ZEDreverse) list reverse
comment
(always)
(ZEDreverse) (!) list
             (c) (1) list reverse

(runs) bits
nil
(null?) bits
nil

(runs) bits
[#false #true #false ...]
(always)
(c) (get-run) bits
    (runs) (tails) (get-run) bits
                   bits

(sort) less-than? list
comment
(always)
(list->ZED) ("apply") "sort" ("wrap2") (list->racket) list
                                       less-than?

(space) port
comment
(always)
(display) port #space

(string?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "string?" ("wrap") value

(string->list) string
accessing the underlying Racket/Scheme function
(always)
(list->ZED) ("apply") "string->list"
                      ("wrap") string

(sub1) number
accessing the underlying Racket/Scheme function
(always)
("apply") "sub1" ("wrap") number

(sum) numbers
[1 2 5 3]
(always)
(ZEDsum) numbers 0

(ZEDsum) numbers accumulator
nil 55
(null?) numbers
accumulator

(ZEDsum) numbers accumulator
[1 2 5 3] 5
(always)
(ZEDsum) (!) numbers (+) accumulator (1) numbers

(symbol?) value
accessing the underlying Racket/Scheme function
(always)
("apply") "symbol?" ("wrap") value

(symbol->string) symbol
accessing the underlying Racket/Scheme function
(always)
("apply") "symbol->string" ("wrap") symbol

(tails) number list
comment
(or) (null?) list
     (=) number 0
list

(tails) number list
comment
(>) number 0
(tails) (sub1) number (!) list

(vector->random-number-generator) vector
accessing the underlying Racket/Scheme function
(always)
("apply") "vector->pseudo-random-generator" ("wrap") vector

(wrap) a
comment
(always)
(c) a nil

(wrap2) a b
comment
(always)
(c) a (wrap) b

(wrap3) a b d
comment
(always)
(c) a (wrap2) b d

(wrap4) a b d e
comment
(always)
(c) a (wrap3) b d e

(wrap5) a b d e f
comment
(always)
(c) a (wrap4) b d e f

(wrap6) a b d e f g
comment
(always)
(c) a (wrap5) b d e f g

(wrap7) a b d e f g h
comment
(always)
(c) a (wrap6) b d e f g h

(wrap8) a b d e f g h i
comment
(always)
(c) a (wrap7) b d e f g h i

(wrap9) a b d e f g h i j
comment
(always)
(c) a (wrap8) b d e f g h i j

(wrap10) a b d e f g h i j k
comment
(always)
(c) a (wrap9) b d e f g h i j k

(wrap11) a b d e f g h i j k l
comment
(always)
(c) a (wrap10) b d e f g h i j k l

(wrap12) a b d e f g h i j k l m
comment
(always)
(c) a (wrap11) b d e f g h i j k l m

(wrap13) a b d e f g h i j k l m n
comment
(always)
(c) a (wrap12) b d e f g h i j k l m n

(wrap14) a b d e f g h i j k l m n o
comment
(always)
(c) a (wrap13) b d e f g h i j k l m n o

(wrap15) a b d e f g h i j k l m n o p
comment
(always)
(c) a (wrap14) b d e f g h i j k l m n o p

(wrap16) a b d e f g h i j k l m n o p q
comment
(always)
(c) a (wrap15) b d e f g h i j k l m n o p q

(write-byte) port byte
accessing the underlying Racket/Scheme function
(always)
("apply") "write-byte" ("wrap2") byte port

(write-bytes) path list
comment
(always)
(ZEDwrite-bytes) (open-output-file) path list

(ZEDwrite-bytes) port list
comment
(null?) list
(close-output-port) port

(ZEDwrite-bytes) port list
comment
(always)
(se) (write-byte) port (1) list
     (ZEDwrite-bytes) port (!) list

(xor) bit1 bit2
comment
(and) (boolean?) bit1
      (boolean?) bit2
(not) (=) bit1 bit2

(zero?) number
comment
(always)
(=) number 0

(zip) bits1 bits2
[ ] [#true #true #true ...]
(or) (null?) bits1 (null?) bits2
nil

(zip) bits1 bits2
[#false #true #false ...] [#true #true #true ...]
(always)
(c) (xor) (1) bits1 (1) bits2
    (zip) (!) bits1 (!) bits2